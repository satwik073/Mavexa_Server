{"version":3,"file":"Auth.js","sourceRoot":"/","sources":["Middlewares/user_auth_provider/Auth.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACpC,uGAAoF;AACpF,uEAAoD;AACpD,6EAAsH;AACtH,4FAA0F;AAC1F,8EAA2E;AAC3E,0EAAkD;AAW3C,MAAM,qBAAqB,GAAG,CAAO,OAAgB,EAAE,QAAkB,EAAE,YAA0B,EAAE,EAAE;IAC5G,IAAI,CAAC;QACD,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,OAAO,CAAC;QAE1C,IAAI,aAAa,IAAI,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE,CAAC;YACvD,MAAM,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACnD,MAAM,mBAAmB,GAAG,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACxD,IAAI,CAAC,cAAc;gBAAE,MAAM,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC;YAE9E,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;YAC/D,IAAI,CAAC,kBAAkB;gBAAE,MAAM,IAAI,KAAK,CAAC,4BAA4B,CAAC,CAAC;YAEvE,MAAM,mBAAmB,GAAG,GAAG,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAqB,CAAC;YAC/F,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAA;YAEhC,MAAO,IAAI,GAAI,CAAC,mBAAmB,KAAK,mBAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,8BAAyB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,mBAAmB,KAAK,mBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,wBAAoC,CAAC,QAAQ,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;YAC/Q,IAAI,CAAC,IAAI,IAAI,mBAAmB,KAAK,mBAAc,CAAC,SAAS,EAAE,CAAC;gBAC5D,OAAO,QAAQ,CAAC,MAAM,CAAC,2BAAiB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mCAAgB,CAAC,YAAY,CAAC,mBAAc,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YAC5I,CAAC;iBAAK,IAAK,CAAC,IAAI,IAAI,mBAAmB,KAAK,mBAAc,CAAC,UAAU,EAAC,CAAC;gBACnE,OAAO,QAAQ,CAAC,MAAM,CAAC,2BAAiB,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,mCAAgB,CAAC,YAAY,CAAC,mBAAc,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YAC7I,CAAC;YAEA,OAAgC,CAAC,IAAI,GAAG,IAAI,CAAC;YAC9C,OAAO,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,4BAA4B,MAAK,mBAAc,CAAC,UAAU;gBACvE,CAAC,CAAC,CAAC,CAAC,0CAA2B,CAAC,kBAAkB,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;oBACtE,CAAC,CAAC,YAAY,EAAE;oBAChB,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8DAA8D,EAAE,CAAC,CAAC;gBAC3G,CAAC,CAAC,CAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,4BAA4B,MAAK,mBAAc,CAAC,SAAS;oBAC7D,CAAC,CAAC,CAAC,CAAC,yCAA0B,CAAC,YAAY,EAAE,yCAA0B,CAAC,mBAAmB,EAAE,yCAA0B,CAAC,mBAAmB,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;wBAC/J,CAAC,CAAC,YAAY,EAAE;wBAChB,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8DAA8D,EAAE,CAAC,CAAC;oBAC3G,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,8BAA8B,EAAE,OAAO,EAAG,mCAAgB,CAAC,YAAY,CAAC,mBAAc,CAAC,KAAK,CAAC,CAAC,OAAO,EAAC,CAAC,CAAC;QAErJ,CAAC;aAAM,CAAC;YACJ,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,gEAAgE,EAAE,CAAC,CAAC;QAClH,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uCAAuC,EAAE,OAAO,EAAG,KAAe,CAAC,OAAO,EAAE,CAAC,CAAC;IAC5H,CAAC;AACL,CAAC,CAAA,CAAC;AAvCW,QAAA,qBAAqB,yBAuChC","sourcesContent":["import { NextFunction, Request, Response } from 'express';\r\nconst jwt = require('jsonwebtoken');\r\nimport user_detailed_description from '../../Model/user_model/UserRegisteringModal';\r\nimport RolesSpecified from '../../Common/structure';\r\nimport { ADMIN_SUPPORT_CONFIGURATION , USER_SUPPORT_CONFIGURATION } from '../../Constants/RoutesDefined/RoutesFormed';\r\nimport admin_detailed_structure_description from '../../Model/admin_model/AdminDataModel';\r\nimport { DEFAULT_EXECUTED } from '../../Constants/Errors/PreDefinedErrors';\r\nimport HTTPS_STATUS_CODE from \"http-status-codes\";\r\n\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: any;\r\n}\r\n\r\ninterface DecodedTokenData {\r\n    [x: string]: RolesSpecified;\r\n    id: RolesSpecified;\r\n}\r\n\r\nexport const is_authenticated_user = async (request: Request, response: Response, next_forward: NextFunction) => {\r\n    try {\r\n        const { authorization } = request.headers;\r\n\r\n        if (authorization && authorization.startsWith(\"Bearer \")) {\r\n            const fetching_token = authorization.split(\" \")[1];\r\n            const modified_token_role = authorization.split(\" \")[2];\r\n            if (!fetching_token) throw new Error(\"Token can't be fetched at this moment\");\r\n\r\n            const SECRET_KEY_FETCHED = process.env.JWT_SECRET_KEY_ATTACHED;\r\n            if (!SECRET_KEY_FETCHED) throw new Error(\"JWT Secret key not defined\");\r\n\r\n            const decoding_token_data = jwt.verify(fetching_token, SECRET_KEY_FETCHED) as DecodedTokenData;\r\n            console.log(decoding_token_data)\r\n            \r\n            const  user =  (modified_token_role === RolesSpecified.USER_DESC) ? await user_detailed_description.findById(decoding_token_data.id) : (modified_token_role === RolesSpecified.ADMIN_DESC) ? await admin_detailed_structure_description.findById(decoding_token_data.id) : null\r\n            if (!user && modified_token_role === RolesSpecified.USER_DESC) {\r\n                return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({ Error: DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.USER_DESC).MESSAGE });\r\n            }else if ( !user && modified_token_role === RolesSpecified.ADMIN_DESC){\r\n                return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({ Error: DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.ADMIN_DESC).MESSAGE });\r\n            }\r\n\r\n            (request as AuthenticatedRequest).user = user;\r\n            return user?.authorities_provided_by_role === RolesSpecified.ADMIN_DESC \r\n            ? ([ADMIN_SUPPORT_CONFIGURATION.admin_access_users].includes(request.path) \r\n                ? next_forward() \r\n                : response.status(403).json({ Error: \"Forbidden: You don't have permission to access this resource\" }))\r\n            : user?.authorities_provided_by_role === RolesSpecified.USER_DESC \r\n                ? ([USER_SUPPORT_CONFIGURATION.user_profile, USER_SUPPORT_CONFIGURATION.user_reverification, USER_SUPPORT_CONFIGURATION.reset_user_password].includes(request.path) \r\n                    ? next_forward() \r\n                    : response.status(403).json({ Error: \"Forbidden: You don't have permission to access this resource\" }))\r\n                : response.status(403).json({ Error: \"Forbidden: Invalid user role\", details : DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.EMPTY).MESSAGE});\r\n        \r\n        } else {\r\n            return response.status(401).json({ Error: \"Authorization token not found, Login first to access Resources\" });\r\n        }\r\n    } catch (error) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error as Error).message });\r\n    }\r\n};\r\n\r\n\r\n"]}
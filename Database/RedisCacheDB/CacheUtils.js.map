{"version":3,"file":"CacheUtils.js","sourceRoot":"/","sources":["Database/RedisCacheDB/CacheUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { redisClusterConnection } from \"./RedisConfigurations\";\r\n\r\nconst parsingTheDataJSONValues = (dataBufferingRequest : Buffer | null ) : any | null => {\r\n    try {\r\n        return (!dataBufferingRequest) ? null : (JSON.parse(dataBufferingRequest.toString()))\r\n    }catch(error_value: any) {\r\n        console.error('Error in Parsing the JSON Data from Cache' , error_value)\r\n        return null\r\n    }\r\n}\r\n\r\nexport const retrieveCachedDataWithPerformanceMetricsAndSafety = async(cacheKeyIdentifierString: string) : Promise<any> => {\r\n    const cacheRetrievalStartTimestamp : number = Date.now();\r\n    try{\r\n        const cachedDataBuffer : Buffer | null = await redisClusterConnection.getBuffer(cacheKeyIdentifierString);\r\n        const parsedData = parsingTheDataJSONValues(cachedDataBuffer);\r\n        return parsedData\r\n    }catch (error) {\r\n        console.error(`An error occurred while attempting to fetch cache for key: ${cacheKeyIdentifierString}`, error);\r\n        return null;\r\n    }\r\n    finally {\r\n        const cacheRetrievalEndTimestamp: number = Date.now();\r\n        const cacheRetrievalDurationInMilliseconds: number = cacheRetrievalEndTimestamp - cacheRetrievalStartTimestamp;\r\n        console.log(`[PERFORMANCE] Cache GET operation for key \"${cacheKeyIdentifierString}\" took ${cacheRetrievalDurationInMilliseconds}ms`);\r\n    }\r\n}\r\n\r\n\r\nexport const setCacheWithAdvancedTTLHandlingAndPipelining = async (\r\n    cacheKeyIdentifierString: string,\r\n    cacheValueObjectToStore: any,\r\n    cacheTimeToLiveInSeconds?: number\r\n): Promise<void> => {\r\n    const cacheSetOperationStartTimestamp: number = Date.now();\r\n    try {\r\n        const  serializedCacheValueString : string = JSON.stringify(cacheValueObjectToStore);\r\n        const  pipelineInstanceForSettingCacheData = redisClusterConnection.pipeline();\r\n        if (cacheTimeToLiveInSeconds){\r\n            pipelineInstanceForSettingCacheData.set(\r\n                cacheKeyIdentifierString,\r\n                serializedCacheValueString,\r\n                'EX', cacheTimeToLiveInSeconds\r\n            )\r\n        }\r\n        else {\r\n            pipelineInstanceForSettingCacheData.set(cacheKeyIdentifierString, serializedCacheValueString);\r\n        }\r\n        await pipelineInstanceForSettingCacheData.exec(); \r\n    } catch (error) {\r\n        console.error(`An error occurred while attempting to set cache for key: ${cacheKeyIdentifierString}`, error);\r\n    } finally {\r\n        const cacheSetOperationEndTimestamp: number = Date.now();\r\n        const cacheSetOperationDurationInMilliseconds: number = cacheSetOperationEndTimestamp - cacheSetOperationStartTimestamp;\r\n        console.log(`[PERFORMANCE] Cache SET operation for key \"${cacheKeyIdentifierString}\" took ${cacheSetOperationDurationInMilliseconds}ms`);\r\n    }\r\n}\r\n\r\nexport const deleteCacheKeyWithDetailedPerformanceMetrics = async (cacheKeyIdentifierString: string): Promise<void> => {\r\n    const cacheDeletionStartTimestamp: number = Date.now();\r\n    try {\r\n        await redisClusterConnection.del(cacheKeyIdentifierString);\r\n    } catch (error) {\r\n        console.error(`An error occurred while attempting to delete cache for key: ${cacheKeyIdentifierString}`, error);\r\n    } finally {\r\n        const cacheDeletionEndTimestamp: number = Date.now();\r\n        const cacheDeletionDurationInMilliseconds: number = cacheDeletionEndTimestamp - cacheDeletionStartTimestamp;\r\n        console.log(`[PERFORMANCE] Cache DEL operation for key \"${cacheKeyIdentifierString}\" took ${cacheDeletionDurationInMilliseconds}ms`);\r\n    }\r\n};\r\n\r\nexport const deleteMultipleCacheKeysWithAdvancedPipeliningAndLogging = async (cacheKeyIdentifierArray: string[]): Promise<void> => {\r\n    const batchCacheDeletionStartTimestamp: number = Date.now();\r\n    try {\r\n        if (cacheKeyIdentifierArray.length === 0) return; \r\n\r\n        const pipelineInstanceForBatchDeletion = redisClusterConnection.pipeline();\r\n        cacheKeyIdentifierArray.forEach((cacheKeyIdentifierString) => pipelineInstanceForBatchDeletion.del(cacheKeyIdentifierString));\r\n\r\n        await pipelineInstanceForBatchDeletion.exec(); \r\n    } catch (error) {\r\n        console.error('An error occurred while attempting to delete multiple cache keys in batch:', error);\r\n    } finally {\r\n        const batchCacheDeletionEndTimestamp: number = Date.now();\r\n        const batchCacheDeletionDurationInMilliseconds: number = batchCacheDeletionEndTimestamp - batchCacheDeletionStartTimestamp;\r\n        console.log(`[PERFORMANCE] Batch Cache DEL operation for multiple keys took ${batchCacheDeletionDurationInMilliseconds}ms`);\r\n    }\r\n};"]}
{"version":3,"file":"RedisConfigurations.js","sourceRoot":"/","sources":["Database/RedisCacheDB/RedisConfigurations.ts"],"names":[],"mappings":"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","sourcesContent":["import Redis from \"ioredis\";\r\n\r\nconst isProductionEnviornmentLoaded = process.env.MODE === 'production';\r\nconst redisConnectionLoaded: string | URL = isProductionEnviornmentLoaded\r\n    ? process.env.REDIS_CONNECTION as string\r\n    : process.env.REDIS_CONNECTION as string\r\nconst redisHostName = isProductionEnviornmentLoaded\r\n    ? process.env.REDIS_HOSTNAME_CLOUD\r\n    : process.env.REDIS_HOSTNAME_CLOUD\r\n\r\nconst redisOptionsConfig = new URL(redisConnectionLoaded)\r\n\r\nconst redisClusterConnection = new Redis({\r\n    host: redisOptionsConfig.hostname || redisHostName,\r\n    port: Number(redisOptionsConfig.port) || 6379,\r\n    password: process.env.REDIS_PASSWORD_GRANTED || redisOptionsConfig.password || undefined,\r\n    maxRetriesPerRequest: 5,\r\n    connectTimeout: isProductionEnviornmentLoaded ? 50000 : 100000,\r\n    retryStrategy: (times_retry) => Math.min(times_retry * 50, 5000),\r\n    lazyConnect: true,\r\n    enableReadyCheck: true,\r\n    enableAutoPipelining: true,\r\n    showFriendlyErrorStack: !isProductionEnviornmentLoaded,\r\n    keyPrefix: 'Mavexa-Cache',\r\n    reconnectOnError: (error_fetched) => {\r\n        const targetError = 'READONLY';\r\n        return (error_fetched?.message?.includes(targetError));\r\n    },\r\n    keepAlive: 30000,\r\n    enableOfflineQueue: true,\r\n    maxLoadingRetryTime: 20000,\r\n    // tls: process.env.REDIS_TLS_ENABLED ? { rejectUnauthorized: false } : undefined\r\n});\r\n\r\nconsole.log('Attempting to connect to Redis with:', redisConnectionLoaded);\r\n\r\nredisClusterConnection.ping((err, res) => {\r\n    if (err) {\r\n        console.error('Error connecting to Redis:', err);\r\n    } else {\r\n        console.log('Connected to Redis:', res);\r\n    }\r\n});\r\n\r\nredisClusterConnection.on('error', (error_value) => {\r\n    console.error('Redis Connection Error', error_value?.message, error_value?.stack);\r\n});\r\nredisClusterConnection.on('connect', () => {\r\n    console.log('Successfully connected to Redis');\r\n});\r\nredisClusterConnection.on('reconnecting', () => {\r\n    console.log('Attempting to reconnect to Redis...');\r\n});\r\nredisClusterConnection.on('end', () => {\r\n    console.error('Connection to Redis has ended. Investigating...');\r\n});\r\n\r\nexport { redisClusterConnection };\r\n"]}
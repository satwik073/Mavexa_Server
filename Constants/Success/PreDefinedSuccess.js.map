{"version":3,"file":"PreDefinedSuccess.js","sourceRoot":"/","sources":["Constants/Success/PreDefinedSuccess.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AACA,oEAAyF;AAElF,MAAM,mBAAmB,GAAG,CAAC,mBAAoC,EAAG,EAAE,CAAA,CAAC;IAC1E,OAAO,EAAG,CAAC,mBAAmB,KAAK,mBAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,8BAA8B,mBAAc,CAAC,SAAS,oBAAoB,CAAA,CAAC,CAAC,CAAC,mBAAmB,KAAK,mBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,8BAA8B,mBAAc,CAAC,UAAU,mBAAmB,CAAC,CAAC,CAAC,IAAI;CACrR,CAAC,CAAA;AAFW,QAAA,mBAAmB,uBAE9B;AACW,QAAA,sBAAsB,GAAG;IAClC,yBAAyB,EAAE,CAAC,wBAA0C,EAAE,mBAAmC,EAAE,EAAE,CAAC,CAAC;QAC7G,eAAe,EAAE,mBAAmB,KAAK,mBAAc,CAAC,UAAU;YAC9D,CAAC,CAAC,wBAAwB,KAAK,4BAAgB,CAAC,UAAU;gBACtD,CAAC,CAAC,GAAG,mBAAc,CAAC,UAAU,IAAI,4BAAgB,CAAC,UAAU,aAAa;gBAC1E,CAAC,CAAC,wBAAwB,KAAK,4BAAgB,CAAC,iBAAiB;oBAC7D,CAAC,CAAC,GAAG,mBAAc,CAAC,UAAU,IAAI,4BAAgB,CAAC,iBAAiB,eAAe;oBACnF,CAAC,CAAC,IAAI;YACd,CAAC,CAAC,mBAAmB,KAAK,mBAAc,CAAC,SAAS;gBAC9C,CAAC,CAAC,wBAAwB,KAAK,4BAAgB,CAAC,UAAU;oBACtD,CAAC,CAAC,GAAG,mBAAc,CAAC,SAAS,IAAI,4BAAgB,CAAC,UAAU,aAAa;oBACzE,CAAC,CAAC,wBAAwB,KAAK,4BAAgB,CAAC,iBAAiB;wBAC7D,CAAC,CAAC,GAAG,mBAAc,CAAC,SAAS,IAAI,4BAAgB,CAAC,iBAAiB,eAAe;wBAClF,CAAC,CAAC,IAAI;gBACd,CAAC,CAAC,IAAI;KACjB,CAAC;IACF,wBAAwB,EAAE,CAAC,mBAAmC,EAAE,EAAE,CAAC,CAAC;QAChE,eAAe,EAAE,CAAC,mBAAmB,KAAK,mBAAc,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,mBAAc,CAAC,UAAU,uBAAuB;YACtH,CAAC,CAAC,CAAC,mBAAmB,KAAK,mBAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,mBAAc,CAAC,SAAS,uBAAuB,CAAC,CAAC,CAAC,IAAI;KACvH,CAAC;IACF,4BAA4B,EAAE,CAAC,aAA+B,EAAE,EAAE,CAAC,CAAC;QAChE,kBAAkB,EAAE,4BAA4B,4BAAgB,CAAC,UAAU,8BAA8B;QACzG,yBAAyB,EAAE,2BAA2B,4BAAgB,CAAC,iBAAiB,CAAC,WAAW,EAAE,0BAA0B;KACnI,CAAC;IACF,mBAAmB,EAAE;QACjB,gBAAgB,EAAE,4CAA4C;KACjE;IACD,4BAA4B,EAAE,CAAC,wBAAwC,EAAE,EAAE,CAAC,CAAC;QACzE,mBAAmB,EAAE,CAAC,wBAAwB,KAAK,mBAAc,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,mBAAc,CAAC,SAAS,CAAC,WAAW,EAAE,yDAAyD,CAAC,CAAC,CAAC,wBAAwB,mBAAc,CAAC,UAAU,CAAC,WAAW,EAAE,uCAAuC;KAC7R,CAAC;CAEL,CAAA","sourcesContent":["\r\nimport RolesSpecified, { AuthTypeDeclared, SuccessManager } from \"../../Common/structure\"\r\n\r\nexport const EMAIL_SESSION_RELAY = (user_type_specified : RolesSpecified ) =>({\r\n    SUCCESS : (user_type_specified === RolesSpecified.USER_DESC) ? `Email Sent Successfully to ${RolesSpecified.USER_DESC} having EMAIL ID: `: (user_type_specified === RolesSpecified.ADMIN_DESC) ? `Email Sent Successfully to ${RolesSpecified.ADMIN_DESC} having EMAIL ID:` : null\r\n})\r\nexport const SUCCESS_VALUES_FETCHER = {\r\n    ENTITY_ONBOARDED_FULFILED: (user_auth_type_specified: AuthTypeDeclared, user_role_specified: RolesSpecified) => ({\r\n        SUCCESS_MESSAGE: user_role_specified === RolesSpecified.ADMIN_DESC\r\n            ? user_auth_type_specified === AuthTypeDeclared.USER_LOGIN\r\n                ? `${RolesSpecified.ADMIN_DESC} ${AuthTypeDeclared.USER_LOGIN} successful`\r\n                : user_auth_type_specified === AuthTypeDeclared.USER_REGISTRATION\r\n                    ? `${RolesSpecified.ADMIN_DESC} ${AuthTypeDeclared.USER_REGISTRATION} successfully`\r\n                    : null\r\n            : user_role_specified === RolesSpecified.USER_DESC\r\n                ? user_auth_type_specified === AuthTypeDeclared.USER_LOGIN\r\n                    ? `${RolesSpecified.USER_DESC} ${AuthTypeDeclared.USER_LOGIN} successful`\r\n                    : user_auth_type_specified === AuthTypeDeclared.USER_REGISTRATION\r\n                        ? `${RolesSpecified.USER_DESC} ${AuthTypeDeclared.USER_REGISTRATION} successfully`\r\n                        : null\r\n                : null\r\n    }),\r\n    RETRIEVED_ENTITY_SESSION: (user_type_specified: RolesSpecified) => ({\r\n        SUCCESS_MESSAGE: (user_type_specified === RolesSpecified.ADMIN_DESC) ? `${RolesSpecified.ADMIN_DESC} fetched Successfully`\r\n            : (user_type_specified === RolesSpecified.USER_DESC) ? `${RolesSpecified.USER_DESC} fetched Successfully` : null\r\n    }),\r\n    USER_FOUND_OR_NOT_CONTROLLED: (user_detected: AuthTypeDeclared) => ({\r\n        USER_LOGIN_MESSAGE: `User does not exists try ${AuthTypeDeclared.USER_LOGIN} using different Credentials`,\r\n        USER_REGISTRATION_SUPPORT: `User Already exists try ${AuthTypeDeclared.USER_REGISTRATION.toLowerCase()}ing with different email`\r\n    }),\r\n    JWT_DETECTED_ERRORS: {\r\n        JWT_NOT_DETECTED: `JWT secret key not detected in the request`\r\n    },\r\n    INVALID_CREDENTIALS_PROVIDED: (user_auth_type_specified: RolesSpecified) => ({\r\n        INVALID_CREDENTIALS: (user_auth_type_specified === RolesSpecified.USER_DESC) ? `${RolesSpecified.USER_DESC.toLowerCase()} provided Invalid credentials, try using different ones` : `Invalid credentials, ${RolesSpecified.ADMIN_DESC.toLowerCase()} cannot log in through this endpoint.`\r\n    })\r\n\r\n}"]}
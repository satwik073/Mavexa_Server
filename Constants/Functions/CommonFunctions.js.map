{"version":3,"file":"CommonFunctions.js","sourceRoot":"/","sources":["Constants/Functions/CommonFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { response } from \"express\";\r\nimport { ERROR_VALUES_FETCHER } from \"../Errors/PreDefinedErrors\";\r\nimport RolesSpecified from \"../../Common/structure\";\r\nimport admin_detailed_structure_description from \"../../Model/admin_model/AdminDataModel\";\r\nimport user_detailed_description from \"../../Model/user_model/UserRegisteringModal\";\r\nconst bcrypt = require('bcrypt')\r\nconst jwt = require('jsonwebtoken')\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: any;\r\n}\r\nexport const OTP_GENERATOR_CALLED = async (entered_password_registration: string, otp_for_verification?: any) => {\r\n    return Math.floor(100000 + Math.random() * 900000).toString();\r\n}\r\nexport const SECURING_PASSCODE = async (entered_password_registration: string) => {\r\n    const salted_credentials = await bcrypt.genSalt(10);\r\n    console.log(\"Salt generated during registration:\", salted_credentials);\r\n    const hashed_password = await bcrypt.hash(entered_password_registration, salted_credentials);\r\n    console.log(\"Hashed password:\", hashed_password);\r\n    return hashed_password;\r\n};\r\n\r\nexport const DECODING_INCOMING_SECURITY_PASSCODE = async (user_entered_password: string, user_registered_password: string) => {\r\n    return await bcrypt.compare(user_entered_password, user_registered_password);\r\n}\r\n\r\nexport const OTP_VALIDATOR_SETTLE = async (user_entered_otp_request: string, software_generated_otp_request: string) => {\r\n    return (+user_entered_otp_request === +software_generated_otp_request) ? true : false\r\n}\r\n\r\nexport const JWT_KEY_GENERATION_ONBOARDED = async (user_generated_id: string) => {\r\n    const SECRET_KEY_FETCHED = process.env.JWT_SECRET_KEY_ATTACHED;\r\n    if (!SECRET_KEY_FETCHED) throw new Error(ERROR_VALUES_FETCHER.JWT_DETECTED_ERRORS.JWT_NOT_DETECTED);\r\n    return jwt.sign(\r\n        { id: user_generated_id },\r\n        SECRET_KEY_FETCHED,\r\n        { expiresIn: process.env.JWT_EXPIRY_DATE_ASSIGNED || '30d' }\r\n    );\r\n}\r\n\r\n\r\nexport const MODIFIED_STATE_SETTER = async (user_auth_type_specified: RolesSpecified, request: Request, user_registered_email?: string, user_entered_password?: string, user_entered_otp_request?: string, user_entered_userName?: string, admin_user_email?: string, admin_userPassword?: string, admin_userName?: string, is_user_verified?: boolean) => {\r\n    const payload_requested: any = {\r\n        ...(user_registered_email ? { user_registered_email } : {}),\r\n        ...(user_entered_password ? { user_entered_password } : {}),\r\n        ...(user_entered_otp_request ? { user_entered_otp_request } : {}),\r\n        ...(user_entered_userName ? { user_entered_userName } : {}),\r\n        ...(admin_user_email ? { admin_user_email } : {}),\r\n        ...(admin_userPassword ? { admin_userPassword } : {}),\r\n        ...(admin_userName ? { admin_userName } : {}),\r\n        ...(is_user_verified ? { is_user_verified } : {})\r\n    };\r\n    let save_payload_properties: any = {};\r\n    if (user_auth_type_specified === RolesSpecified.ADMIN_DESC) {\r\n        save_payload_properties = {\r\n            ...(payload_requested.admin_userEmail ? { admin_userEmail: payload_requested.admin_userEmail } : {}),\r\n            ...(payload_requested.admin_userPassword ? { admin_userPassword: payload_requested.admin_userPassword } : {}),\r\n            ...(payload_requested.admin_userName ? { admin_userName: payload_requested.admin_userName } : {})\r\n        };\r\n    }\r\n    else if (user_auth_type_specified === RolesSpecified.USER_DESC) {\r\n        save_payload_properties = {\r\n            ...(payload_requested.user_registered_email ? { user_registered_email: payload_requested.user_registered_email } : {}),\r\n            ...(payload_requested.user_entered_password ? { user_entered_password: payload_requested.user_entered_password } : {}),\r\n            ...(payload_requested.user_entered_otp_request ? { user_entered_otp_request: payload_requested.user_entered_otp_request } : {}),\r\n            ...(payload_requested.user_entered_userName ? { user_entered_userName: payload_requested.user_entered_userName } : {}),\r\n            ...(payload_requested.is_user_verified !== undefined ? { is_user_verified: payload_requested.is_user_verified } : {})\r\n        };\r\n\r\n        let user: any = null;\r\n\r\n        if (user_auth_type_specified === RolesSpecified.USER_DESC) {\r\n            user = await user_detailed_description.findOne({ registered_user_email: user_registered_email });\r\n        } else if (user_auth_type_specified === RolesSpecified.ADMIN_DESC) {\r\n            user = await admin_detailed_structure_description.findById({ admin_userEmail: admin_user_email });\r\n        }\r\n\r\n        (request as AuthenticatedRequest).user = user;\r\n        if(user) {\r\n            user.save()\r\n        }\r\n    }\r\n\r\n}"]}
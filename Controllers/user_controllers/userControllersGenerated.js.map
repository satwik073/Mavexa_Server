{"version":3,"file":"userControllersGenerated.js","sourceRoot":"/","sources":["Controllers/user_controllers/userControllersGenerated.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport user_detailed_description from \"../../Model/user_model/UserRegisteringModal\";\r\nconst jwt = require('jsonwebtoken')\r\nconst bcrypt = require('bcryptjs');\r\nimport redis from 'redis';\r\nimport { promisify } from 'util';\r\nimport { email_service_enabled } from \"../../Services/EmailServices\";\r\nimport { EXISTING_USER_FOUND_IN_DATABASE, MISSING_FIELDS_VALIDATOR, TRACKING_DATA_OBJECT } from \"../../Middlewares/Error/ErrorHandlerReducer\";\r\nimport RolesSpecified, { AuthTypeDeclared } from \"../../Common/structure\";\r\nimport { DECODING_INCOMING_SECURITY_PASSCODE, JWT_KEY_GENERATION_ONBOARDED, OTP_GENERATOR_CALLED, SECURING_PASSCODE } from \"../../Constants/Functions/CommonFunctions\";\r\nimport { DEFAULT_EXECUTED, ERROR_VALUES_FETCHER } from \"../../Constants/Errors/PreDefinedErrors\";\r\nimport HTTPS_STATUS_CODE from \"http-status-codes\";\r\nimport { SUCCESS_VALUES_FETCHER } from \"../../Constants/Success/PreDefinedSuccess\";\r\nimport { RedisClient } from \"ioredis/built/connectors/SentinelConnector/types\";\r\n\r\n\r\n\r\n\r\ninterface UserRegisterRequest {\r\n    registered_username: string;\r\n    registered_user_email: string;\r\n    registered_user_password: string;\r\n}\r\n\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: any;\r\n}\r\ninterface UserLoginRequest {\r\n    registered_user_email: string;\r\n    registered_user_password: string;\r\n}\r\ninterface UserVerificationMethod {\r\n    otp_for_verification: string\r\n}\r\n\r\nexport const letting_user_registered = async (request: Request<{}, {}, UserRegisterRequest>, response: Response) => {\r\n    try {\r\n\r\n        const { registered_username, registered_user_email, registered_user_password } = request.body;\r\n        const is_exists_missing_fields = MISSING_FIELDS_VALIDATOR({ registered_user_email, registered_user_password, registered_username }, response, AuthTypeDeclared.USER_REGISTRATION)\r\n        if (is_exists_missing_fields) return is_exists_missing_fields\r\n        await EXISTING_USER_FOUND_IN_DATABASE(registered_user_email, AuthTypeDeclared.USER_REGISTRATION, RolesSpecified.USER_DESC)\r\n        const otp_generating_code_block = await OTP_GENERATOR_CALLED(registered_user_email)\r\n        const hashed_password_generated = await SECURING_PASSCODE(registered_user_password);\r\n\r\n        const { recognized_user: new_registered_user_defined, token_for_authentication_generated } = await TRACKING_DATA_OBJECT({ registered_user_email, registered_username, registered_user_password: hashed_password_generated, otp_for_verification: otp_generating_code_block }, RolesSpecified.USER_DESC);\r\n\r\n        return response.status(HTTPS_STATUS_CODE.OK).json({\r\n            success: true,\r\n            message: [\r\n                {\r\n                    SUCCESS_MESSAGE: SUCCESS_VALUES_FETCHER.ENTITY_ONBOARDED_FULFILED(AuthTypeDeclared.USER_REGISTRATION, RolesSpecified.USER_DESC).SUCCESS_MESSAGE,\r\n                    USER_ROLE: RolesSpecified.USER_DESC,\r\n                    AUTH_TYPE: AuthTypeDeclared.USER_REGISTRATION\r\n                },\r\n\r\n            ],\r\n            userInfo: new_registered_user_defined,\r\n            token: token_for_authentication_generated\r\n        });\r\n    } catch (error_value_displayed) {\r\n        console.error(\"Error in user registration:\", error_value_displayed);\r\n        return response.status(HTTPS_STATUS_CODE.INTERNAL_SERVER_ERROR).json({\r\n            success: false,\r\n            message: ERROR_VALUES_FETCHER.USER_FOUND_OR_NOT_CONTROLLED(AuthTypeDeclared.USER_REGISTRATION).USER_REGISTRATION_SUPPORT\r\n        });\r\n    }\r\n}\r\nexport const letting_user_login = async (request: Request, response: Response) => {\r\n    try {\r\n        const { registered_user_email, registered_user_password } = request.body;\r\n        let cachedUserData;\r\n        const is_exists_missing_fields = MISSING_FIELDS_VALIDATOR(\r\n            { registered_user_email, registered_user_password },\r\n            response,\r\n            AuthTypeDeclared.USER_LOGIN\r\n        );\r\n        if (is_exists_missing_fields) return is_exists_missing_fields;\r\n        try {\r\n            cachedUserData = await request?.redisClient?.get(`user:${registered_user_email}`);\r\n        } catch (err) {\r\n            console.error('Error fetching data from Redis:', err);\r\n        }\r\n\r\n        let is_existing_database_user;\r\n\r\n        if (cachedUserData) {\r\n            console.log('User data retrieved from Redis cache');\r\n            is_existing_database_user = JSON.parse(cachedUserData);\r\n        } else {\r\n            console.log('No cache found, fetching user data from database');\r\n            is_existing_database_user = await EXISTING_USER_FOUND_IN_DATABASE(\r\n                registered_user_email,\r\n                AuthTypeDeclared.USER_LOGIN,\r\n                RolesSpecified.USER_DESC\r\n            );\r\n            console.log(is_existing_database_user)\r\n\r\n            if (is_existing_database_user) {\r\n                try {\r\n                    console.log('Caching user data in Redis');\r\n                    if (\r\n                        'registered_user_email' in is_existing_database_user &&\r\n                        'registered_user_password' in is_existing_database_user &&\r\n                        'registered_username' in is_existing_database_user &&\r\n                        'authorities_provided_by_role' in is_existing_database_user &&\r\n                        '_id' in is_existing_database_user\r\n                    ) {\r\n                        const userDataToCache: any = {\r\n                            id: is_existing_database_user._id,\r\n                            email: is_existing_database_user.registered_user_email,\r\n                            username: is_existing_database_user.registered_username,\r\n                            password: is_existing_database_user.registered_user_password,\r\n                            verified: is_existing_database_user.is_user_verified,\r\n                            role: is_existing_database_user.authorities_provided_by_role,\r\n                        };\r\n\r\n                        await request?.redisClient?.set(\r\n                            `user:${registered_user_email}`,\r\n                            JSON.stringify(userDataToCache),\r\n                            \r\n                        );\r\n                        \r\n                    }\r\n                } catch (err) {\r\n                    console.error('Error setting data in Redis:', err);\r\n                }\r\n            } else {\r\n                console.log('User not found in database');\r\n                return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({\r\n                    Error: DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.USER_DESC).MESSAGE\r\n                });\r\n            }\r\n        }\r\n\r\n        console.log(\"User data:\", is_existing_database_user);\r\n        if (is_existing_database_user && cachedUserData) {\r\n            const is_password_valid = await DECODING_INCOMING_SECURITY_PASSCODE(\r\n                registered_user_password,\r\n                is_existing_database_user.password\r\n            );\r\n\r\n            console.log('Password validation result:', is_password_valid);\r\n\r\n            if (is_password_valid) {\r\n                const token_for_authentication_generated = await JWT_KEY_GENERATION_ONBOARDED(is_existing_database_user._id);\r\n                return response.status(HTTPS_STATUS_CODE.OK).json({\r\n                    success: true,\r\n                    message: [{\r\n                        SUCCESS_MESSAGE: SUCCESS_VALUES_FETCHER.ENTITY_ONBOARDED_FULFILED(AuthTypeDeclared.USER_LOGIN, RolesSpecified.USER_DESC).SUCCESS_MESSAGE,\r\n                        USER_ROLE: RolesSpecified.USER_DESC,\r\n                        AUTH_TYPE: AuthTypeDeclared.USER_LOGIN\r\n                    }],\r\n                    userInfo: is_existing_database_user,\r\n                    token: token_for_authentication_generated\r\n                });\r\n            } else {\r\n                console.log('Invalid password');\r\n                return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({\r\n                    Error: ERROR_VALUES_FETCHER.INVALID_CREDENTIALS_PROVIDED(RolesSpecified.USER_DESC)\r\n                });\r\n            }\r\n        }\r\n        else if (is_existing_database_user && !cachedUserData){\r\n            const is_password_valid = await DECODING_INCOMING_SECURITY_PASSCODE(\r\n                registered_user_password,\r\n                is_existing_database_user.registered_user_password\r\n            );\r\n\r\n            console.log('Password validation result:', is_password_valid);\r\n\r\n            if (is_password_valid) {\r\n                const token_for_authentication_generated = await JWT_KEY_GENERATION_ONBOARDED(is_existing_database_user._id);\r\n                return response.status(HTTPS_STATUS_CODE.OK).json({\r\n                    success: true,\r\n                    message: [{\r\n                        SUCCESS_MESSAGE: SUCCESS_VALUES_FETCHER.ENTITY_ONBOARDED_FULFILED(AuthTypeDeclared.USER_LOGIN, RolesSpecified.USER_DESC).SUCCESS_MESSAGE,\r\n                        USER_ROLE: RolesSpecified.USER_DESC,\r\n                        AUTH_TYPE: AuthTypeDeclared.USER_LOGIN\r\n                    }],\r\n                    userInfo: is_existing_database_user,\r\n                    token: token_for_authentication_generated\r\n                });\r\n            } else {\r\n                console.log('Invalid password');\r\n                return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({\r\n                    Error: ERROR_VALUES_FETCHER.INVALID_CREDENTIALS_PROVIDED(RolesSpecified.USER_DESC)\r\n                });\r\n            }\r\n        }\r\n         else {\r\n            console.log('Password field not found in user data');\r\n        }\r\n\r\n        return response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json({\r\n            Error: ERROR_VALUES_FETCHER.INVALID_CREDENTIALS_PROVIDED(RolesSpecified.USER_DESC)\r\n        });\r\n\r\n    } catch (error: any) {\r\n        console.error('Error in letting_user_login:', error);\r\n        return response.status(HTTPS_STATUS_CODE.INTERNAL_SERVER_ERROR).json({\r\n            Error: 'An error occurred during login. Please try again later.',\r\n            Details: error.message\r\n        });\r\n    }\r\n};\r\n\r\n\r\nexport const verify_email_provided_user = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const { otp_for_verification } = request.body;\r\n        if (!otp_for_verification) {\r\n            return response.status(400).json({ Error: \"Please provide otp\" });\r\n        }\r\n        const stored_token_for_user_request = await OTP_GENERATOR_CALLED(otp_for_verification, request.user.otp_for_verification)\r\n\r\n        if (stored_token_for_user_request) {\r\n            request.user.otp_for_verification = \"\";\r\n            request.user.is_user_verified = true;\r\n\r\n            await request.user.save();\r\n\r\n            return response.status(200).json({ success: true, message: \"Email verified successfully\" });\r\n        } else {\r\n            return response.status(400).json({ Error: \"Invalid OTP, please try again\" });\r\n        }\r\n\r\n    } catch (error_value_displayed) {\r\n        console.error(error_value_displayed);\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error_value_displayed as Error).message });\r\n    }\r\n}\r\nexport const resend_otp_for_verification_request = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) throw new Error(DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.USER_DESC).MESSAGE);\r\n\r\n        if (!fetched_loggedin_user.is_user_verified) {\r\n            const redefining_otp_generation = OTP_GENERATOR_CALLED(request.user.otp_for_verification, request.user.otp_for_verification)\r\n            fetched_loggedin_user.otp_for_verification = redefining_otp_generation;\r\n            await fetched_loggedin_user.save();\r\n\r\n            await email_service_enabled({\r\n                senders_email: process.env.SENDER_EMAIL || '',\r\n                receivers_email: fetched_loggedin_user.registered_user_email,\r\n                otp_for_verification: fetched_loggedin_user.otp_for_verification,\r\n                product_by_company: process.env.PRODUCT_NAME || '',\r\n                receivers_username: fetched_loggedin_user.registered_username\r\n            });\r\n\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: \"OTP sent successfully\",\r\n                updated_user_profile_otp: fetched_loggedin_user\r\n            });\r\n\r\n        } else {\r\n            return response.status(400).json({ Error: \"User already verified\" });\r\n        }\r\n\r\n    } catch (error_value_displayed) {\r\n        console.error(error_value_displayed);\r\n        return response.status(500).json({\r\n            Error: 'Something went wrong, try again later',\r\n            details: (error_value_displayed as Error).message\r\n        });\r\n    }\r\n}\r\n\r\nexport const reset_password_for_verified_user = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) throw new Error();\r\n        if (fetched_loggedin_user.is_user_verified) {\r\n            const { registered_user_password } = request.body;\r\n            const is_same_password_for_user = await bcrypt.compare(registered_user_password, fetched_loggedin_user.registered_user_password)\r\n            if (!is_same_password_for_user) {\r\n                const salted_credentials = await bcrypt.genSalt(10);\r\n                const hashed_password_generated = await bcrypt.hash(registered_user_password, salted_credentials);\r\n                fetched_loggedin_user.registered_user_password = hashed_password_generated;\r\n                await fetched_loggedin_user.save()\r\n\r\n                return response.status(200).json({\r\n                    success: true,\r\n                    message: \"Password Updated successfully\",\r\n                    updated_user_profile_password: fetched_loggedin_user\r\n                });\r\n            }\r\n            else {\r\n                return response.status(400).json({ Error: \"Password can't be same as previous password use different one\" });\r\n            }\r\n\r\n        } else {\r\n            return response.status(400).json({ Error: \"Password can't be reset at this moment\" });\r\n        }\r\n    } catch (error_value_displayed) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error_value_displayed as Error).message });\r\n    }\r\n}\r\nexport const get_user_profile = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n\r\n        let cachedUserData;\r\n        try {\r\n            cachedUserData = await request?.redisClient?.get(`user:${request.user?.registered_user_email}`);\r\n        } catch (err) {\r\n            console.error('Error fetching data from Redis:', err);\r\n        }\r\n\r\n        if (cachedUserData) {\r\n            console.log('User data retrieved from Redis cache');\r\n            return response.status(HTTPS_STATUS_CODE.OK).json({\r\n                success: true,\r\n                message: SUCCESS_VALUES_FETCHER.RETRIEVED_ENTITY_SESSION(RolesSpecified.USER_DESC).SUCCESS_MESSAGE,\r\n                userInfo: JSON.parse(cachedUserData)\r\n            });\r\n        }\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) {\r\n            throw new Error(DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.USER_DESC).MESSAGE);\r\n        }\r\n\r\n        console.log('User data fetched from request');\r\n        return response.status(HTTPS_STATUS_CODE.OK).json({\r\n            success: true,\r\n            message: SUCCESS_VALUES_FETCHER.RETRIEVED_ENTITY_SESSION(RolesSpecified.USER_DESC).SUCCESS_MESSAGE,\r\n            userInfo: fetched_loggedin_user\r\n        });\r\n\r\n    } catch (error_value_displayed) {\r\n        console.error('Error in get_user_profile:', error_value_displayed);\r\n        return response.status(HTTPS_STATUS_CODE.INTERNAL_SERVER_ERROR).json({\r\n            Error: DEFAULT_EXECUTED.ERROR,\r\n            details: (error_value_displayed as Error).message,\r\n            NOTFOUND: DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.USER_DESC).MESSAGE\r\n        });\r\n    }\r\n};\r\n"]}
{"version":3,"file":"userControllersGenerated.js","sourceRoot":"/","sources":["Controllers/user_controllers/userControllersGenerated.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport user_detailed_description from \"../../Model/user_model/UserRegisteringModal\";\r\nconst jwt = require('jsonwebtoken')\r\nconst bcrypt = require('bcryptjs');\r\n\r\nimport { email_service_enabled } from \"../../Services/EmailServices\";\r\n\r\n\r\ninterface UserRegisterRequest {\r\n    registered_username: string;\r\n    registered_user_email: string;\r\n    registered_user_password: string;\r\n}\r\n\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: any;\r\n}\r\ninterface UserLoginRequest {\r\n    registered_user_email: string;\r\n    registered_user_password: string;\r\n}\r\ninterface UserVerificationMethod {\r\n    otp_for_verification: string\r\n}\r\n\r\nexport const letting_user_registered = async (request: Request<{}, {}, UserRegisterRequest>, response: Response) => {\r\n    try {\r\n        const { registered_username, registered_user_email, registered_user_password } = request.body;\r\n        if (!registered_user_email || !registered_user_password || !registered_username) {\r\n            return response.status(400).json({ Error: \"All fields are required to register the user\" });\r\n        }\r\n        const exisiting_user_found = await user_detailed_description.findOne({ registered_user_email });\r\n        if (exisiting_user_found) {\r\n            return response.status(400).json({ Error: \"User already exists, try registering with a different email\" });\r\n        }\r\n        const otp_generating_code_block = Math.floor(100000 + Math.random() * 900000).toString();\r\n        const salted_credentials = await bcrypt.genSalt(10);\r\n        const hashed_password_generated = await bcrypt.hash(registered_user_password, salted_credentials);\r\n        const new_registered_user_defined = new user_detailed_description({\r\n            registered_user_email,\r\n            registered_username,\r\n            registered_user_password: hashed_password_generated,\r\n            otp_for_verification: otp_generating_code_block\r\n        });\r\n        await new_registered_user_defined.save();\r\n        const SECRET_KEY_FETCHED = process.env.JWT_SECRET_KEY_ATTACHED;\r\n        if (!SECRET_KEY_FETCHED) throw new Error(\"JWT Secret key not defined\");\r\n\r\n        const token_for_authentication_generated = jwt.sign(\r\n            { id: new_registered_user_defined._id },\r\n            SECRET_KEY_FETCHED,\r\n            { expiresIn: process.env.JWT_EXPIRY_DATE_ASSIGNED || '30d' }\r\n        );\r\n        await email_service_enabled({\r\n            senders_email: process.env.SENDER_EMAIL || '',\r\n            recievers_email: new_registered_user_defined.registered_user_email,\r\n            otp_for_verfication: new_registered_user_defined.otp_for_verification,\r\n            product_by_company: process.env.PRODUCT_NAME || '',\r\n            recievers_username: new_registered_user_defined.registered_username\r\n        });\r\n        return response.status(200).json({\r\n            success: true,\r\n            message_Displayed: \"User Registered Successfully\",\r\n            userInfo: new_registered_user_defined,\r\n            token: token_for_authentication_generated\r\n        });\r\n\r\n    } catch (error) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error as Error).message });\r\n    }\r\n}\r\n\r\nexport const letting_user_login = async (request: Request<{}, {}, UserLoginRequest>, response: Response) => {\r\n    try {\r\n        const { registered_user_email, registered_user_password } = request.body;\r\n        if (!registered_user_email || !registered_user_password) {\r\n            return response.status(400).json({ Error: \"All fields are required to login\" });\r\n        }\r\n        const exisiting_user_found = await user_detailed_description.findOne({ registered_user_email });\r\n        if (!exisiting_user_found) {\r\n            return response.status(404).json({ Error: \"User doesn't exist, try logging in with different credentials\" });\r\n        }\r\n        const decoded_password_stored = await bcrypt.compare(registered_user_password, exisiting_user_found.registered_user_password);\r\n        if (!decoded_password_stored) {\r\n            return response.status(401).json({ Error: \"Invalid credentials, try using different ones\" });\r\n        }\r\n        const SECRET_KEY_FETCHED = process.env.JWT_SECRET_KEY_ATTACHED;\r\n        if (!SECRET_KEY_FETCHED) throw new Error(\"JWT Secret key not defined\");\r\n\r\n        const token_for_authentication_generated = jwt.sign(\r\n            { id: exisiting_user_found._id },\r\n            SECRET_KEY_FETCHED,\r\n            { expiresIn: process.env.JWT_EXPIRY_DATE_ASSIGNED || '30d' }\r\n        );\r\n\r\n        return response.status(200).json({\r\n            success: true,\r\n            message: \"User logged in successfully\",\r\n            userInfo: exisiting_user_found,\r\n            token: token_for_authentication_generated\r\n        });\r\n\r\n    } catch (error) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error as Error).message });\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const verify_email_provided_user = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const { otp_for_verification } = request.body;\r\n        if (!otp_for_verification) {\r\n            return response.status(400).json({ Error: \"Please provide otp\" });\r\n        }\r\n        const stored_token_for_user_request = request.user.otp_for_verification;\r\n\r\n        if (stored_token_for_user_request) {\r\n            if (+otp_for_verification === +stored_token_for_user_request) {\r\n                request.user.otp_for_verification = \"\";\r\n                request.user.is_user_verified = true;\r\n\r\n                await request.user.save();\r\n\r\n                return response.status(200).json({ success: true, message: \"Email verified successfully\" });\r\n            } else {\r\n                return response.status(400).json({ Error: \"Invalid OTP, please try again\" });\r\n            }\r\n        } else {\r\n            return response.status(400).json({ Error: \"No OTP found for user, please request a new one\" });\r\n        }\r\n    } catch (error_value_displayed) {\r\n        console.error(error_value_displayed);\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error_value_displayed as Error).message });\r\n    }\r\n}\r\nexport const resend_otp_for_verification_request = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) throw new Error(\"User not found\");\r\n\r\n        if (!fetched_loggedin_user.is_user_verified) {\r\n            const redefining_otp_generation = Math.floor(100000 + Math.random() * 900000).toString();\r\n            fetched_loggedin_user.otp_for_verification = redefining_otp_generation;\r\n            await fetched_loggedin_user.save();\r\n\r\n            await email_service_enabled({\r\n                senders_email: process.env.SENDER_EMAIL || '',\r\n                recievers_email: fetched_loggedin_user.registered_user_email,\r\n                otp_for_verfication: fetched_loggedin_user.otp_for_verification,\r\n                product_by_company: process.env.PRODUCT_NAME || '',\r\n                recievers_username: fetched_loggedin_user.registered_username\r\n            });\r\n\r\n            return response.status(200).json({\r\n                success: true,\r\n                message: \"OTP sent successfully\",\r\n                updated_user_profile_otp: fetched_loggedin_user\r\n            });\r\n\r\n        } else {\r\n            return response.status(400).json({ Error: \"User already verified\" });\r\n        }\r\n\r\n    } catch (error_value_displayed) {\r\n        console.error(error_value_displayed);\r\n        return response.status(500).json({\r\n            Error: 'Something went wrong, try again later',\r\n            details: (error_value_displayed as Error).message\r\n        });\r\n    }\r\n}\r\n\r\nexport const reset_password_for_verified_user = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) throw new Error(\"User not found\");\r\n        if (fetched_loggedin_user.is_user_verified) {\r\n            const { registered_user_password } = request.body;\r\n            const is_same_password_for_user = await bcrypt.compare(registered_user_password ,  fetched_loggedin_user.registered_user_password)\r\n            if(!is_same_password_for_user){\r\n                const salted_credentials = await bcrypt.genSalt(10);\r\n                const hashed_password_generated = await bcrypt.hash(registered_user_password, salted_credentials);\r\n                fetched_loggedin_user.registered_user_password = hashed_password_generated;\r\n                await fetched_loggedin_user.save()\r\n\r\n                return response.status(200).json({\r\n                    success: true,\r\n                    message: \"Password Updated successfully\",\r\n                    updated_user_profile_password: fetched_loggedin_user\r\n                });\r\n            }\r\n          else{\r\n            return response.status(400).json({ Error: \"Password can't be same as previous password use different one\" });\r\n          }\r\n\r\n        }else {\r\n            return response.status(400).json({ Error: \"Password can't be reset at this moment\" });\r\n        }\r\n    }catch (error_value_displayed) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error_value_displayed as Error).message });\r\n    }\r\n}\r\nexport const get_user_profile = async (request: AuthenticatedRequest, response: Response) => {\r\n    try {\r\n        const fetched_loggedin_user = request.user;\r\n        if (!fetched_loggedin_user) throw new Error(\"User Can't found\");\r\n        console.log(fetched_loggedin_user)\r\n        return response.status(200).json({\r\n            success: true,\r\n            message: \"User Fetched successfuly\",\r\n            userInfo: fetched_loggedin_user\r\n        })\r\n    } catch (error_value_displayed) {\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later', details: (error_value_displayed as Error).message });\r\n    }\r\n}\r\n\r\nexport const get_all_registered_user_profile = async( request : Request , response : Response )=>{\r\n    try {\r\n        const collecting_total_data =  await user_detailed_description.find();\r\n        return response.status(200).json({\r\n            success: true ,\r\n            message : \"all users data fetched successfully\",\r\n            total_data : collecting_total_data\r\n        })\r\n\r\n    }catch{\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later'})\r\n    }\r\n}"]}
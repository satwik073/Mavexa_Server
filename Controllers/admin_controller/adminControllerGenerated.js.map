{"version":3,"file":"adminControllerGenerated.js","sourceRoot":"/","sources":["Controllers/admin_controller/adminControllerGenerated.ts"],"names":[],"mappings":"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","sourcesContent":["import { Request, Response } from \"express\";\r\nimport admin_detailed_structure_description from \"../../Model/admin_model/AdminDataModel\";\r\nimport RolesSpecified, { AuthTypeDeclared } from \"../../Common/structure\";\r\nimport { ASYNC_ERROR_HANDLER_ESTAIBLISHED, EXISTING_USER_FOUND_IN_DATABASE, MISSING_FIELDS_VALIDATOR } from \"../../Middlewares/Error/ErrorHandlerReducer\";\r\nimport { DECODING_INCOMING_SECURITY_PASSCODE, JWT_KEY_GENERATION_ONBOARDED, SECURING_PASSCODE } from \"../../Constants/Functions/CommonFunctions\";\r\nimport user_detailed_description from \"../../Model/user_model/UserRegisteringModal\";\r\nimport { SUCCESS_VALUES_FETCHER } from \"../../Constants/Success/PreDefinedSuccess\";\r\nimport { HTTPS_STATUS_CODE } from \"../../server\";\r\nimport { DEFAULT_EXECUTED, ERROR_VALUES_FETCHER } from \"../../Constants/Errors/PreDefinedErrors\";\r\n\r\ninterface AdminRegistrationModel {\r\n    admin_userName: string,\r\n    admin_userEmail: string,\r\n    admin_userPassword: string,\r\n    authorities_provided_by_role?: RolesSpecified.ADMIN_DESC\r\n}\r\n\r\nexport const authorized_admin_account = ASYNC_ERROR_HANDLER_ESTAIBLISHED(async (request: Request<{}, {}, AdminRegistrationModel>, response: Response) => {\r\n    const { admin_userEmail, admin_userName, admin_userPassword } = request.body;\r\n    const is_exists_missing_fields = MISSING_FIELDS_VALIDATOR({ admin_userEmail, admin_userName, admin_userPassword }, response, AuthTypeDeclared.USER_REGISTRATION)\r\n    if (is_exists_missing_fields) return is_exists_missing_fields\r\n    await EXISTING_USER_FOUND_IN_DATABASE(admin_userEmail, AuthTypeDeclared.USER_REGISTRATION, RolesSpecified.ADMIN_DESC)\r\n    const hashed_password_generated = await SECURING_PASSCODE(admin_userPassword)\r\n    const admin_registration_data = new admin_detailed_structure_description({ admin_userEmail, admin_userName, admin_userPassword: hashed_password_generated })\r\n    await admin_registration_data.save();\r\n    if( admin_registration_data) {\r\n        const token_for_authentication_generated = await JWT_KEY_GENERATION_ONBOARDED(admin_registration_data.id)\r\n        return response.status(HTTPS_STATUS_CODE.OK).json({\r\n            success: true,\r\n            message: [\r\n                             \r\n                { \r\n                    \r\n                    SUCCESS_MESSAGE : SUCCESS_VALUES_FETCHER.ENTITY_ONBOARDED_FULFILED(AuthTypeDeclared.USER_REGISTRATION, RolesSpecified.ADMIN_DESC).SUCCESS_MESSAGE,\r\n                    USER_ROLE: RolesSpecified.ADMIN_DESC ,\r\n                    AUTH_TYPE: AuthTypeDeclared.USER_REGISTRATION\r\n                }, \r\n                \r\n            ],\r\n            admin_data: admin_registration_data,\r\n            token_generated: token_for_authentication_generated\r\n        })\r\n    }\r\n\r\n\r\n})\r\n\r\nexport const authorized_admin_login = ASYNC_ERROR_HANDLER_ESTAIBLISHED(async (request: Request, response: Response) => {\r\n    const { admin_userEmail, admin_userPassword } = request.body;\r\n    const is_exists_missing_fields = MISSING_FIELDS_VALIDATOR({ admin_userEmail, admin_userPassword }, response, AuthTypeDeclared.USER_LOGIN);\r\n    if (is_exists_missing_fields) return is_exists_missing_fields;\r\n    const is_admin_credentials_valid = await EXISTING_USER_FOUND_IN_DATABASE(admin_userEmail, AuthTypeDeclared.USER_LOGIN, RolesSpecified.ADMIN_DESC)\r\n    return !is_admin_credentials_valid\r\n    ? response.status(404).json({ Error: DEFAULT_EXECUTED.MISSING_USER(RolesSpecified.ADMIN_DESC).MESSAGE})\r\n    : 'admin_userPassword' in is_admin_credentials_valid\r\n        ? await DECODING_INCOMING_SECURITY_PASSCODE(admin_userPassword, is_admin_credentials_valid.admin_userPassword)\r\n            ? ( async () => {\r\n                const token_for_authentication_generated = await JWT_KEY_GENERATION_ONBOARDED(is_admin_credentials_valid._id)\r\n                return response.status(HTTPS_STATUS_CODE.OK).json({\r\n                    success: true,\r\n                    message: [\r\n                             \r\n                        { \r\n                            SUCCESS_MESSAGE : SUCCESS_VALUES_FETCHER.ENTITY_ONBOARDED_FULFILED(AuthTypeDeclared.USER_LOGIN, RolesSpecified.ADMIN_DESC).SUCCESS_MESSAGE,\r\n                            USER_ROLE: RolesSpecified.ADMIN_DESC ,\r\n                            AUTH_TYPE: AuthTypeDeclared.USER_LOGIN\r\n                        }, \r\n                        \r\n                    ],\r\n                    userInfo: is_admin_credentials_valid,\r\n                    token: token_for_authentication_generated\r\n                });\r\n            })()\r\n            : response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json(ERROR_VALUES_FETCHER.INVALID_CREDENTIALS_PROVIDED(RolesSpecified.ADMIN_DESC))\r\n        : response.status(HTTPS_STATUS_CODE.UNAUTHORIZED).json(ERROR_VALUES_FETCHER.INVALID_CREDENTIALS_PROVIDED(RolesSpecified.USER_DESC));\r\n\r\n})\r\n\r\nexport const get_all_registered_user_profile = async (request: Request, response: Response) => {\r\n    try {\r\n        const collecting_total_data = await user_detailed_description.find();\r\n        return response.status(200).json({\r\n            success: true,\r\n            message: \"all users data fetched successfully\",\r\n            total_data: collecting_total_data\r\n        })\r\n\r\n    } catch {\r\n        return response.status(500).json(DEFAULT_EXECUTED.ERROR)\r\n    }\r\n}"]}
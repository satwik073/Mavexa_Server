{"version":3,"file":"adminControllerGenerated.js","sourceRoot":"/","sources":["Controllers/admin_controller/adminControllerGenerated.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAM,GAAG,GAAG,OAAO,CAAC,cAAc,CAAC,CAAA;AACnC,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAChC,4FAA0F;AAC1F,oEAA0E;AAC1E,qFAA0J;AAC1J,+EAA8E;AAC9E,8EAA+E;AAC/E,uGAAoF;AASvE,QAAA,wBAAwB,GAAG,IAAA,sDAAgC,EAAC,CAAM,OAAkD,EAAG,QAAmB,EAAE,EAAE;IACnJ,MAAM,EAAC,eAAe,EAAG,cAAc,EAAG,kBAAkB,EAAC,GAAG,OAAO,CAAC,IAAI,CAAC;IAC7E,MAAM,wBAAwB,GAAG,IAAA,8CAAwB,EAAC,EAAC,eAAe,EAAG,cAAc,EAAG,kBAAkB,EAAC,EAAE,QAAQ,EAAG,4BAAgB,CAAC,iBAAiB,CAAC,CAAA;IACjK,IAAG,wBAAwB;QAAE,OAAO,wBAAwB,CAAA;IAC5D,MAAM,IAAA,qDAA+B,EAAC,eAAe,EAAE,4BAAgB,CAAC,iBAAiB,EAAG,mBAAc,CAAC,UAAU,CAAC,CAAA;IACtH,MAAM,yBAAyB,GAAG,MAAM,IAAA,mCAAiB,EAAC,kBAAkB,CAAC,CAAA;IAC7E,MAAM,uBAAuB,GAAG,IAAI,wBAAoC,CAAC,EAAC,eAAe,EAAE,cAAc,EAAG,kBAAkB,EAAG,yBAAyB,EAAC,CAAC,CAAA;IAC5J,MAAM,uBAAuB,CAAC,IAAI,EAAE,CAAC;IACrC,MAAM,kBAAkB,GAAG,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC;IAC/D,IAAI,CAAC,kBAAkB;QAAE,MAAM,IAAI,KAAK,CAAC,uCAAoB,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;IACpG,MAAM,kCAAkC,GAAG,GAAG,CAAC,IAAI,CAC/C,EAAE,EAAE,EAAE,uBAAuB,CAAC,GAAG,EAAE,EACnC,kBAAkB,EAClB,EAAE,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,wBAAwB,IAAI,KAAK,EAAE,CAC/D,CAAC;IACF,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;QAC7B,OAAO,EAAE,IAAI;QACb,OAAO,EAAG,+BAA+B;QACzC,UAAU,EAAG,uBAAuB;QACpC,eAAe,EAAG,kCAAkC;KACvD,CAAC,CAAA;AAGV,CAAC,CAAA,CAAC,CAAA;AAEK,MAAM,+BAA+B,GAAG,CAAO,OAAiB,EAAG,QAAmB,EAAE,EAAE;IAC7F,IAAI,CAAC;QACD,MAAM,qBAAqB,GAAI,MAAM,8BAAyB,CAAC,IAAI,EAAE,CAAC;QACtE,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC;YAC7B,OAAO,EAAE,IAAI;YACb,OAAO,EAAG,qCAAqC;YAC/C,UAAU,EAAG,qBAAqB;SACrC,CAAC,CAAA;IAEN,CAAC;IAAA,WAAK,CAAC;QACH,OAAO,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,uCAAuC,EAAC,CAAC,CAAA;IACvF,CAAC;AACL,CAAC,CAAA,CAAA;AAZY,QAAA,+BAA+B,mCAY3C","sourcesContent":["import { Request ,Response } from \"express\";\r\nconst jwt = require('jsonwebtoken')\r\nconst bcrypt = require('bcrypt')\r\nimport admin_detailed_structure_description from \"../../Model/admin_model/AdminDataModel\";\r\nimport RolesSpecified, { AuthTypeDeclared } from \"../../Common/structure\";\r\nimport { ASYNC_ERROR_HANDLER_ESTAIBLISHED, EXISTING_USER_FOUND_IN_DATABASE, MISSING_FIELDS_VALIDATOR } from \"../../Middlewares/Error/ErrorHandlerReducer\";\r\nimport { SECURING_PASSCODE } from \"../../Constants/Functions/CommonFunctions\";\r\nimport { ERROR_VALUES_FETCHER } from \"../../Constants/Errors/PreDefinedErrors\";\r\nimport user_detailed_description from \"../../Model/user_model/UserRegisteringModal\";\r\n\r\n\r\ninterface AdminRegistrationModel {\r\n    admin_userName : string,\r\n    admin_userEmail : string,\r\n    admin_userPassword : string,\r\n    authorities_provided_by_role? : RolesSpecified.ADMIN_DESC\r\n}\r\nexport const authorized_admin_account = ASYNC_ERROR_HANDLER_ESTAIBLISHED(async(request : Request<{}, {}, AdminRegistrationModel > , response : Response) =>{\r\n        const {admin_userEmail , admin_userName , admin_userPassword} = request.body;\r\n        const is_exists_missing_fields = MISSING_FIELDS_VALIDATOR({admin_userEmail , admin_userName , admin_userPassword}, response , AuthTypeDeclared.USER_REGISTRATION)\r\n        if(is_exists_missing_fields) return is_exists_missing_fields\r\n        await EXISTING_USER_FOUND_IN_DATABASE(admin_userEmail, AuthTypeDeclared.USER_REGISTRATION , RolesSpecified.ADMIN_DESC)\r\n        const hashed_password_generated = await SECURING_PASSCODE(admin_userPassword)\r\n        const admin_registration_data = new admin_detailed_structure_description({admin_userEmail, admin_userName , admin_userPassword : hashed_password_generated})\r\n        await admin_registration_data.save();\r\n        const SECRET_KEY_FETCHED = process.env.JWT_SECRET_KEY_ATTACHED;\r\n        if (!SECRET_KEY_FETCHED) throw new Error(ERROR_VALUES_FETCHER.JWT_DETECTED_ERRORS.JWT_NOT_DETECTED);\r\n        const token_for_authentication_generated = jwt.sign(\r\n            { id: admin_registration_data._id },\r\n            SECRET_KEY_FETCHED,\r\n            { expiresIn: process.env.JWT_EXPIRY_DATE_ASSIGNED || '30d' }\r\n        );\r\n        return response.status(200).json({\r\n            success: true,\r\n            message : \"Admin Registered Successfully\",\r\n            admin_data : admin_registration_data,\r\n            token_generated : token_for_authentication_generated\r\n        })\r\n\r\n\r\n})\r\n\r\nexport const get_all_registered_user_profile = async( request : Request , response : Response )=>{\r\n    try {\r\n        const collecting_total_data =  await user_detailed_description.find();\r\n        return response.status(200).json({\r\n            success: true ,\r\n            message : \"all users data fetched successfully\",\r\n            total_data : collecting_total_data\r\n        })\r\n\r\n    }catch{\r\n        return response.status(500).json({ Error: 'Something went wrong, try again later'})\r\n    }\r\n}"]}
{"version":3,"file":"workflowsControllersGenerated.js","sourceRoot":"/","sources":["Controllers/WorkflowControllers/workflowsControllersGenerated.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,2BAA2B;AAC3B,sDAA8E;AAC9E,qFAAyI;AACzI,0EAAkD;AAiBlD,+CAA+C;AAClC,QAAA,oBAAoB,GAAG,IAAA,sDAAgC,EAAC,CAAO,OAA8D,EAAE,QAAkB,EAAE,EAAE;;IAC9J,IAAI,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;QAClB,2CAA2C;QAC3C,MAAM,EAAE,WAAW,EAAE,iBAAiB,EAAE,cAAc,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC;QAE9G,+BAA+B;QAC/B,MAAM,aAAa,GAAG,IAAA,8CAAwB,EAAC;YAC3C,WAAW,EAAE,iBAAiB;SACjC,EAAE,QAAQ,EAAE,4BAAgB,CAAC,UAAU,CAAC,CAAC;QAE1C,IAAI,aAAa;YAAE,OAAO,aAAa,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,IAAI,CAAC,CAAA;QAC1B,+CAA+C;QAC/C,MAAM,WAAW,GAAG,MAAM,IAAA,oCAAc,EAAC;YACrC,WAAW;YACX,cAAc,EAAE,CAAA,MAAA,OAAO,CAAC,IAAI,0CAAE,EAAE,KAAI,cAAc,EAAG,0CAA0C;YAC/F,iBAAiB;YACjB,iBAAiB;YACjB,iBAAiB;SACpB,EAAE,8BAAkB,CAAC,WAAW,CAAC,CAAC;QAEnC,iDAAiD;QACjD,IAAI,WAAW,CAAC,OAAO,EAAE,CAAC;YACtB,OAAO,QAAQ,CAAC,MAAM,CAAC,2BAAiB,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC;gBACnD,OAAO,EAAE,oCAAoC;gBAC7C,YAAY,EAAE,WAAW,CAAC,YAAY;aACzC,CAAC,CAAC;QACP,CAAC;aAAM,CAAC;YACJ,mDAAmD;YACnD,OAAO,QAAQ,CAAC,MAAM,CAAC,2BAAiB,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC;gBACvD,OAAO,EAAE,WAAW,CAAC,OAAO,IAAI,gCAAgC;aACnE,CAAC,CAAC;QACP,CAAC;IAEL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,KAAK,CAAC,gCAAgC,EAAE,KAAK,CAAC,CAAC;QACvD,2CAA2C;QAC3C,OAAO,QAAQ,CAAC,MAAM,CAAC,2BAAiB,CAAC,qBAAqB,CAAC,CAAC,IAAI,CAAC;YACjE,OAAO,EAAE,qCAAqC;YAC9C,KAAK,EAAE,KAAK,CAAC,OAAO,IAAI,KAAK;SAChC,CAAC,CAAC;IACP,CAAC;AACL,CAAC,CAAA,CAAC,CAAC","sourcesContent":["// Import necessary modules\r\nimport { AuthTypeDeclared, SchemaCreationType } from \"../../Common/structure\";\r\nimport { ASYNC_ERROR_HANDLER_ESTAIBLISHED, DATA_PROCESSOR, MISSING_FIELDS_VALIDATOR } from \"../../Middlewares/Error/ErrorHandlerReducer\";\r\nimport HTTPS_STATUS_CODE from \"http-status-codes\";\r\nimport { Request, Response } from \"express\";\r\nimport mongoose, { Schema } from \"mongoose\";\r\n\r\n// Define interfaces for WorkflowSchema and AuthenticatedRequest\r\ninterface WorkflowSchema {\r\n    displayName: string;\r\n    accountOwnerId: mongoose.Schema.Types.ObjectId;\r\n    descriptionConfig: string;\r\n    isWorkflowEnabled: boolean;\r\n    isWorkflowAllowed: boolean;\r\n}\r\n\r\ninterface AuthenticatedRequest extends Request {\r\n    user?: any;  // Assuming 'user' is populated by some authentication middleware\r\n}\r\n\r\n// Route handler for creating virtual workflows\r\nexport const creatingVirtualFLows = ASYNC_ERROR_HANDLER_ESTAIBLISHED(async (request: Request<{}, {}, WorkflowSchema, AuthenticatedRequest>, response: Response) => {\r\n    try {\r\n        console.log(\"run\")\r\n        // Destructure fields from the request body\r\n        const { displayName, descriptionConfig, accountOwnerId, isWorkflowAllowed, isWorkflowEnabled } = request.body;\r\n\r\n        // Validate the required fields\r\n        const missingFields = MISSING_FIELDS_VALIDATOR({\r\n            displayName, descriptionConfig\r\n        }, response, AuthTypeDeclared.USER_LOGIN);\r\n\r\n        if (missingFields) return missingFields;\r\n        console.log(request?.user)\r\n        // Call the DATA_PROCESSOR to save the workflow\r\n        const trackedData = await DATA_PROCESSOR({\r\n            displayName,\r\n            accountOwnerId: request.user?.id || accountOwnerId,  // Ensure the user ID is used if available\r\n            descriptionConfig,\r\n            isWorkflowAllowed,\r\n            isWorkflowEnabled\r\n        }, SchemaCreationType.__WORKFLOWS);\r\n\r\n        // Check if the workflow was successfully created\r\n        if (trackedData.success) {\r\n            return response.status(HTTPS_STATUS_CODE.CREATED).json({\r\n                message: \"Virtual Flows created successfully\",\r\n                workflowData: trackedData.workflowData\r\n            });\r\n        } else {\r\n            // Return a bad request response if creation failed\r\n            return response.status(HTTPS_STATUS_CODE.BAD_REQUEST).json({\r\n                message: trackedData.message || \"Failed to create virtual flows\"\r\n            });\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in creatingVirtualFLows:\", error);\r\n        // Return an internal server error response\r\n        return response.status(HTTPS_STATUS_CODE.INTERNAL_SERVER_ERROR).json({\r\n            message: \"Virtual Flows creation unsuccessful\",\r\n            error: error.message || error\r\n        });\r\n    }\r\n});"]}
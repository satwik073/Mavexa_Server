{"version":3,"file":"instrument.js","sourceRoot":"/","sources":["Common/instrument.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,+DAAiD;AACjD,MAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,MAAM,EAAE,wBAAwB,EAAE,GAAG,OAAO,CAAC,wBAAwB,CAAC,CAAC;AAEvE,MAAM,CAAC,IAAI,CAAC;IACV,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;IAC3B,YAAY,EAAE;QACZ,wBAAwB,EAAE;QACxB,aAAa,CAAC,iBAAiB,EAAE;KACpC;IACD,gBAAgB,EAAE,GAAG;IACrB,wBAAwB,EAAE,GAAG;IAC7B,wBAAwB,EAAE,GAAG;IAC7B,kBAAkB,EAAE,GAAG;IACvB,WAAW,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa;IAClD,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,OAAO,IAAI,QAAQ;IACxC,UAAU,CAAC,KAAU,EAAE,IAAiC;QACtD,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACrC,IAAI,KAAK,IAAI,KAAK,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAClC,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,gBAAgB,CAAC,UAAoE,EAAE,IAAS;QAC9F,IAAI,UAAU,CAAC,QAAQ,KAAK,MAAM,IAAI,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,EAAE,CAAC;YACpF,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,mBAAmB,EAAE,IAAI;IACzB,gBAAgB,EAAE,IAAI;IACtB,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa;CAC9C,CAAC,CAAC;AAEH,MAAM,aAAa,GAAG,GAAG,EAAE;IACzB,IAAI,CAAC;QACH,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACjE,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;AACH,CAAC,CAAC;AAEF,aAAa,EAAE,CAAC;AAChB,OAAO,CAAC,EAAE,CAAC,oBAAoB,EAAE,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;IACnD,OAAO,CAAC,GAAG,CAAC,sBAAsB,EAAE,MAAM,CAAC,CAAC;IAC5C,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AAClC,CAAC,CAAC,CAAC;AACH,OAAO,CAAC,GAAG,CAAC,wFAAwF,CAAC,CAAC","sourcesContent":["\r\nimport * as SentryUpdates from \"@sentry/browser\";\r\nconst Sentry = require(\"@sentry/node\");\r\nconst { nodeProfilingIntegration } = require(\"@sentry/profiling-node\");\r\n\r\nSentry.init({\r\n  dsn: process.env.SENTRY_DSN,\r\n  integrations: [\r\n    nodeProfilingIntegration(),\r\n      SentryUpdates.replayIntegration(),\r\n  ],\r\n  tracesSampleRate: 1.0,\r\n  replaysSessionSampleRate: 0.1,\r\n  replaysOnErrorSampleRate: 1.0,\r\n  profilesSampleRate: 1.0,\r\n  environment: process.env.NODE_ENV || 'development',\r\n  release: process.env.RELEASE || 'v1.0.0',\r\n  beforeSend(event: any, hint: { originalException: any; }) {\r\n    const error = hint.originalException;\r\n    if (error && error.status === 404) {\r\n      return null; \r\n    }\r\n    return event;\r\n  },\r\n  beforeBreadcrumb(breadcrumb: { category: string; data: { url: string | string[]; }; }, hint: any) {\r\n    if (breadcrumb.category === 'http' && breadcrumb.data.url.includes('/health-check')) {\r\n      return null;\r\n    }\r\n    return breadcrumb;\r\n  },\r\n  autoSessionTracking: true, \r\n  attachStacktrace: true,\r\n  debug: process.env.NODE_ENV === 'development'\r\n});\r\n\r\nconst simulateError = () => {\r\n  try {\r\n    throw new Error(\"Simulated advanced error for Sentry testing\");\r\n  } catch (error) {\r\n    Sentry.captureException(error);\r\n    console.log(\"Test error captured and sent to Sentry\");\r\n  }\r\n};\r\n\r\nsimulateError();\r\nprocess.on(\"unhandledRejection\", (reason, promise) => {\r\n  console.log(\"Unhandled Rejection:\", reason);\r\n  Sentry.captureException(reason); \r\n});\r\nconsole.log(\"âœ… Sentry initialized with advanced options for profiling, tracing, and error filtering\");\r\n"]}
{"version":3,"file":"instrument.js","sourceRoot":"/","sources":["Common/instrument.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,wDAA0C;AAE1C,0DAA0D;AAC1D,MAAM,CAAC,IAAI,CAAC;IACV,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,+DAA+D;IAC5F,YAAY,EAAE,EAAE,EAAE,+CAA+C;IACjE,gBAAgB,EAAE,GAAG;IACrB,wBAAwB,EAAE,GAAG;IAC7B,wBAAwB,EAAE,GAAG;IAC7B,WAAW,EAAE,YAAY,EAAE,kDAAkD;IAC7E,OAAO,EAAE,QAAQ,EAAE,+BAA+B;IAElD,UAAU,CAAC,KAAK,EAAE,IAAI;QACpB,MAAM,KAAK,GAAG,IAAI,CAAC,iBAAiB,CAAC;QACrC,IAAI,KAAK,IAAI,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,MAAK,GAAG,EAAE,CAAC;YACnC,OAAO,IAAI,CAAC,CAAC,oBAAoB;QACnC,CAAC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAED,gBAAgB,CAAC,UAAU;;QACzB,IAAI,UAAU,CAAC,QAAQ,KAAK,MAAM,KAAI,MAAA,UAAU,CAAC,IAAI,0CAAE,GAAG,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAA,EAAE,CAAC;YACrF,OAAO,IAAI,CAAC;QACd,CAAC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;IACD,mBAAmB,EAAE,IAAI;IACzB,gBAAgB,EAAE,IAAI;IACtB,KAAK,EAAE,IAAI,EAAE,8BAA8B;CAC5C,CAAC,CAAC;AAEH,mDAAmD;AACnD,MAAM,aAAa,GAAG,GAAG,EAAE;IACzB,IAAI,CAAC;QACH,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;IACxD,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/B,OAAO,CAAC,GAAG,CAAC,wCAAwC,CAAC,CAAC;IACxD,CAAC;AACH,CAAC,CAAC;AAEF,aAAa,EAAE,CAAC;AAEhB,qDAAqD;AACrD,kBAAe;IACP,KAAK,CAAC,OAAO;;YACjB,IAAI,CAAC;gBACH,oBAAoB;gBACpB,OAAO,IAAI,QAAQ,CAAC,+BAA+B,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YACxE,CAAC;YAAC,OAAO,KAAK,EAAE,CAAC;gBACf,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;gBAC/B,OAAO,IAAI,QAAQ,CAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;YAC5D,CAAC;QACH,CAAC;KAAA;CACF,CAAC;AAEF,oDAAoD;AACpD,0CAA0C;AAC1C,0EAA0E;AAE1E,gBAAgB;AAChB,iCAAiC;AACjC,oBAAoB;AACpB,kCAAkC;AAClC,2CAA2C;AAC3C,OAAO;AACP,2BAA2B;AAC3B,mCAAmC;AACnC,mCAAmC;AACnC,6BAA6B;AAC7B,wDAAwD;AACxD,8CAA8C;AAC9C,gEAAgE;AAChE,4CAA4C;AAC5C,2CAA2C;AAC3C,sBAAsB;AACtB,QAAQ;AACR,oBAAoB;AACpB,OAAO;AACP,wGAAwG;AACxG,6FAA6F;AAC7F,qBAAqB;AACrB,QAAQ;AACR,yBAAyB;AACzB,OAAO;AACP,gCAAgC;AAChC,4BAA4B;AAC5B,kDAAkD;AAClD,MAAM;AAEN,gCAAgC;AAChC,UAAU;AACV,sEAAsE;AACtE,sBAAsB;AACtB,sCAAsC;AACtC,6DAA6D;AAC7D,MAAM;AACN,KAAK;AAEL,mBAAmB;AACnB,0DAA0D;AAC1D,iDAAiD;AACjD,sCAAsC;AACtC,MAAM;AACN,yGAAyG","sourcesContent":["import * as Sentry from \"@sentry/browser\";\r\n\r\n// Initialize Sentry with Worker-compatible configurations\r\nSentry.init({\r\n  dsn: process.env.SENTRY_DSN, // Replace with actual DSN or use a secure environment solution\r\n  integrations: [], // Add Worker-compatible integrations if needed\r\n  tracesSampleRate: 1.0,\r\n  replaysSessionSampleRate: 0.1,\r\n  replaysOnErrorSampleRate: 1.0,\r\n  environment: \"production\", // Adjust this manually or dynamically if feasible\r\n  release: \"v1.0.0\", // Set release version manually\r\n\r\n  beforeSend(event, hint) {\r\n    const error = hint.originalException;\r\n    if (error && error?.status === 404) {\r\n      return null; // Ignore 404 errors\r\n    }\r\n    return event;\r\n  },\r\n\r\n  beforeBreadcrumb(breadcrumb) {\r\n    if (breadcrumb.category === 'http' && breadcrumb.data?.url.includes('/health-check')) {\r\n      return null;\r\n    }\r\n    return breadcrumb;\r\n  },\r\n  autoSessionTracking: true,\r\n  attachStacktrace: true,\r\n  debug: true, // Adjust based on environment\r\n});\r\n\r\n// Example function to trigger and capture an error\r\nconst simulateError = () => {\r\n  try {\r\n    throw new Error(\"Simulated error for Sentry testing\");\r\n  } catch (error) {\r\n    Sentry.captureException(error);\r\n    console.log(\"Test error captured and sent to Sentry\");\r\n  }\r\n};\r\n\r\nsimulateError();\r\n\r\n// Default export for Cloudflare Worker compatibility\r\nexport default {\r\n  async fetch(request) {\r\n    try {\r\n      // Worker logic here\r\n      return new Response(\"Hello from Cloudflare Worker!\", { status: 200 });\r\n    } catch (error) {\r\n      Sentry.captureException(error);\r\n      return new Response(\"An error occurred\", { status: 500 });\r\n    }\r\n  },\r\n};\r\n\r\n// import * as SentryUpdates from \"@sentry/browser\";\r\n// const Sentry = require(\"@sentry/node\");\r\n// const { nodeProfilingIntegration } = require(\"@sentry/profiling-node\");\r\n\r\n// Sentry.init({\r\n//   dsn: process.env.SENTRY_DSN,\r\n//   integrations: [\r\n//     nodeProfilingIntegration(),\r\n//       SentryUpdates.replayIntegration(),\r\n//   ],\r\n//   tracesSampleRate: 1.0,\r\n//   replaysSessionSampleRate: 0.1,\r\n//   replaysOnErrorSampleRate: 1.0,\r\n//   profilesSampleRate: 1.0,\r\n//   environment: process.env.NODE_ENV || 'development',\r\n//   release: process.env.RELEASE || 'v1.0.0',\r\n//   beforeSend(event: any, hint: { originalException: any; }) {\r\n//     const error = hint.originalException;\r\n//     if (error && error.status === 404) {\r\n//       return null; \r\n//     }\r\n//     return event;\r\n//   },\r\n//   beforeBreadcrumb(breadcrumb: { category: string; data: { url: string | string[]; }; }, hint: any) {\r\n//     if (breadcrumb.category === 'http' && breadcrumb.data.url.includes('/health-check')) {\r\n//       return null;\r\n//     }\r\n//     return breadcrumb;\r\n//   },\r\n//   autoSessionTracking: true, \r\n//   attachStacktrace: true,\r\n//   debug: process.env.NODE_ENV === 'development'\r\n// });\r\n\r\n// const simulateError = () => {\r\n//   try {\r\n//     throw new Error(\"Simulated advanced error for Sentry testing\");\r\n//   } catch (error) {\r\n//     Sentry.captureException(error);\r\n//     console.log(\"Test error captured and sent to Sentry\");\r\n//   }\r\n// };\r\n\r\n// simulateError();\r\n// process.on(\"unhandledRejection\", (reason, promise) => {\r\n//   console.log(\"Unhandled Rejection:\", reason);\r\n//   Sentry.captureException(reason); \r\n// });\r\n// console.log(\"âœ… Sentry initialized with advanced options for profiling, tracing, and error filtering\");\r\n"]}
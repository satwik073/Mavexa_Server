{"version":3,"file":"server.js","sourceRoot":"/","sources":["server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,CAAC,qBAAqB,CAAC,CAAA;AAE9B,kFAAsE;AACtE,oFAAwE;AACxE,kEAA0D;AAG1D,MAAM,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;AACrC,MAAM,eAAe,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACvC,MAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAA;AAClC,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,CAAC,CAAA;AACzC,MAAM,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAA;AAC5B,MAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AAChC,MAAM,CAAC,MAAM,EAAE,CAAC;AAGhB,IAAA,mBAA0B,GAAE,CAAC;AAG7B,MAAM,cAAc,GAAG,GAAG,EAAE;IAExB,MAAM,GAAG,GAAG,OAAO,EAAE,CAAA;IAErB,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC,CAAA;IAC1B,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;IACf,MAAM,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC;IACrC,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,IAAI,CAAC;IAChE,GAAG,CAAC,GAAG,CAAC,UAAU,EAAE,oBAAuB,CAAC,CAAC;IAC7C,GAAG,CAAC,GAAG,CAAC,kBAAkB,EAAE,qBAAwB,CAAC,CAAA;IACrD,GAAG,CAAC,MAAM,CAAC,iBAAiB,EAAE,GAAS,EAAE;QACrC,OAAO,CAAC,GAAG,CAAC,uCAAuC,iBAAiB,EAAE,CAAC,CAAC;IAC5E,CAAC,CAAA,CAAC,CAAC;AACP,CAAC,CAAA;AAGD,IAAK,eAAe,CAAC,QAAQ,EAAC,CAAC;IAC3B,MAAM,OAAO,GAAG,eAAe,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;IAC9C,OAAO,CAAC,GAAG,CAAC,kBAAkB,OAAO,CAAC,GAAG,aAAa,CAAC,CAAC;IACxD,OAAO,CAAC,GAAG,CAAC,sBAAsB,OAAO,OAAO,CAAC,CAAC;IAClD,KAAM,IAAI,CAAC,GAAE,CAAC,EAAG,CAAC,GAAG,OAAO,EAAG,CAAC,EAAE,EAAC,CAAC;QAChC,eAAe,CAAC,IAAI,EAAE,CAAA;IAC1B,CAAC;IACD,eAAe,CAAC,EAAE,CAAC,MAAM,EAAG,CAAC,MAAmC,EAAG,IAAS,EAAG,MAAW,EAAC,EAAE;QACzF,OAAO,CAAC,GAAG,CAAC,UAAU,MAAM,CAAC,OAAO,CAAC,GAAG,iCAAiC,CAAC,CAAC;QAC3E,eAAe,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAA;AACN,CAAC;KACI,CAAC;IACF,cAAc,EAAE,CAAA;AACpB,CAAC","sourcesContent":["require(\"./Common/instrument\")\r\nimport { Request ,Response , NextFunction } from 'express';\r\nimport user_controlling_routes from './Routes/user_routers/userRouter'\r\nimport admin_controlling_routes from './Routes/admin_routes/adminRoutes'\r\nimport connection_DB_estaiblished from './DB/DB/db_config'\r\n\r\n\r\nconst operatingSystem = require('os')\r\nconst clusterPremises = require('cluster')\r\nconst Sentry = require(\"@sentry/node\");\r\nconst express = require('express')\r\nconst bodyParser = require('body-parser')\r\nconst cors = require('cors')\r\nconst dotenv = require('dotenv')\r\ndotenv.config();\r\n\r\n\r\nconnection_DB_estaiblished();\r\n\r\n\r\nconst server_configs = () => {\r\n\r\n    const app = express()\r\n    \r\n    app.use(bodyParser.json())\r\n    app.use(cors())\r\n    Sentry.setupExpressErrorHandler(app);\r\n    const PORT_ESTAIBLISHED = process.env.PORT_ESTAIBLISHED || 8000;\r\n    app.use('/api/v1/', user_controlling_routes);\r\n    app.use('/api/v1/controls', admin_controlling_routes)\r\n    app.listen(PORT_ESTAIBLISHED, async () => {\r\n        console.log(`Server running successfully on port ${PORT_ESTAIBLISHED}`);\r\n    });\r\n}\r\n\r\n\r\nif ( clusterPremises.isMaster){\r\n    const numCPUs = operatingSystem.cpus().length;\r\n    console.log(`Master process ${process.pid} is running`);\r\n    console.log(`Forking server for ${numCPUs} CPUs`);\r\n    for ( let i =0 ; i < numCPUs ; i++){\r\n        clusterPremises.fork()\r\n    }\r\n    clusterPremises.on('exit' , (worker: { process: { pid: any; }; } , code: any , signal: any)=>{\r\n        console.log(`Worker ${worker.process.pid} died. Starting a new worker...`);\r\n        clusterPremises.fork();\r\n    })\r\n}\r\nelse {\r\n    server_configs()\r\n}\r\n"]}
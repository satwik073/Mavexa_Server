{"version":3,"file":"server.js","sourceRoot":"/","sources":["server.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAE/B,kFAA+E;AAC/E,oFAA+E;AAC/E,kEAAuE;AACvE,gDAA8C;AAC9C,sDAAyC;AACzC,oDAAgD;AAChD,4EAA+D;AAC/D,sDAAiD;AACjD,sEAAwD;AACxD,sEAA0D;AAC1D,kEAAyD;AACzD,kEAA2D;AAC3D,oDAAuD;AACvD,gDAA4D;AAC5D,kDAA2D;AAC3D,yEAAiH;AACjH,MAAM,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AAC5C,MAAM,0BAA0B,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AACtD,MAAM,gCAAgC,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC;AACjE,MAAM,sBAAsB,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;AAClD,MAAM,6BAA6B,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7D,MAAM,0BAA0B,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AACrD,MAAM,yBAAyB,GAAG,OAAO,CAAC,aAAa,CAAC,CAAC;AAEzD,MAAM,sCAAsC,GAAG,GAAG,EAAE;IAChD,IAAI,CAAC;QACD,MAAM,2BAA2B,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,YAAY,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,CAAC;QACrH,0BAA0B,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,cAA0B,CAAC,OAAO,CAAC,SAAS,EAAE,2BAA2B,CAAC,EAAE,CAAC,CAAC;QACxH,OAAO,CAAC,IAAI,CAAC,8BAA8B,2BAA2B,EAAE,CAAC,CAAC;QAC1E,OAAO,2BAA2B,KAAK,gBAAgB;YACvD,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,2BAA2B;YACzC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;IAC3C,CAAC;IAAC,OAAO,KAAW,EAAE,CAAC;QACnB,OAAO,CAAC,KAAK,CAAC,0CAA0C,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;QACzE,OAAO,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAA;IAClD,CAAC;AACL,CAAC,CAAC;AAEF,sCAAsC,EAAE,CAAC;AACzC,IAAA,mBAAsC,GAAE,CAAC;AAEzC,MAAM,sBAAsB,GAAG,IAAI,iBAAkB,CAAC,OAAO,CAAC,GAAG,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC;AAK1F,MAAM,kCAAkC,GAAG,GAAG,EAAE,CAAC,gBAAiC,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AAEnH,MAAM,2BAA2B,GAAG,IAAA,yBAA2B,EAAC;IAC5D,KAAK,EAAE,IAAI,uBAA4B,CAAC,EAAE,MAAM,EAAE,sBAAsB,EAAE,CAAC;IAC3E,MAAM,EAAE,kCAAkC,EAAE;IAC5C,MAAM,EAAE,KAAK;IACb,iBAAiB,EAAE,KAAK;IACxB,MAAM,EAAE;QACJ,MAAM,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,YAAY;QAC7C,QAAQ,EAAE,IAAI;QACd,QAAQ,EAAE,QAAQ;QAClB,MAAM,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE;KACzB;CACJ,CAAC,CAAC;AAEH,MAAM,wBAAwB,GAAG,IAAA,4BAA6B,EAAC;IAC3D,QAAQ,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;IACxB,GAAG,EAAE,GAAG;IACR,OAAO,EAAE,EAAE,KAAK,EAAE,mEAAmE,EAAE;CAC1F,CAAC,CAAC;AAEH,MAAM,iCAAiC,GAAG,GAAG,EAAE;IAC3C,MAAM,YAAY,GAAG,iBAA0B,CAAC,YAAY,CAAC;QACzD,KAAK,EAAE,MAAM;QACb,MAAM,EAAE,iBAA0B,CAAC,MAAM,CAAC,OAAO,CAC7C,iBAA0B,CAAC,MAAM,CAAC,SAAS,EAAE,EAC7C,iBAA0B,CAAC,MAAM,CAAC,IAAI,EAAE,CAC3C;QACD,UAAU,EAAE;YACR,IAAI,iBAA0B,CAAC,UAAU,CAAC,OAAO,EAAE;YACnD,IAAI,iBAA0B,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,iBAAiB,EAAE,CAAC;SAClF;KACJ,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,uCAAuC,GAAG,GAAS,EAAE;IACvD,MAAM,qBAAqB,GAAG,sBAAsB,EAAE,CAAC;IACvD,MAAM,oBAAoB,GAAG,iCAAiC,EAAE,CAAC;IACjE,MAAM,aAAa,GAAG,sCAAsC,EAAE,CAAC;IAE/D,qBAAqB,CAAC,GAAG,CAAC,yBAAyB,CAAC,MAAM,CAAC;QACvD,eAAe,EAAE,oBAAoB;QACrC,KAAK,EAAE,MAAM;QACb,GAAG,EAAE,iCAAiC;KACzC,CAAC,CAAC,CAAC;IAEJ,MAAM,UAAU,GAAG,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,CAAC,UAAU,CAAC,MAAI,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,CAAC,SAAS,CAAC,CAAA,CAAC;IACjG,qBAAqB,CAAC,GAAG,CAAC,IAAA,cAAwC,EAAC;QAC/D,MAAM,EAAE,UAAU;QAClB,OAAO,EAAE,CAAC,iCAAqB,CAAC,GAAG,EAAG,iCAAqB,CAAC,IAAI,EAAG,iCAAqB,CAAC,MAAM,EAAG,iCAAqB,CAAC,GAAG,EAAG,iCAAqB,CAAC,GAAG,CAAC;QACxJ,WAAW,EAAE,IAAI;KACpB,CAAC,CAAC,CAAC;IAEJ,qBAAqB,CAAC,GAAG,CAAC,IAAA,gBAA0B,GAAE,CAAC,CAAC;IACxD,qBAAqB,CAAC,GAAG,CAAC,yBAAyB,EAAE,CAAC,CAAC;IACvD,qBAAqB,CAAC,GAAG,CAAC,6BAA6B,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC;IACjF,qBAAqB,CAAC,GAAG,CAAC,IAAA,uBAA8B,GAAE,CAAC,CAAC;IAC5D,qBAAqB,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;IACpD,qBAAqB,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;IACvD,qBAAqB,CAAC,GAAG,CAAC,CAAC,GAAkB,EAAE,GAAa,EAAE,IAAkB,EAAE,EAAE;QAChF,GAAG,CAAC,WAAW,GAAG,sBAAsB,CAAC;QACzC,IAAI,EAAE,CAAC;IACX,CAAC,CAAC,CAAC;IACH,gCAAgC,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC;IACvE,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,iBAAiB,IAAI,IAAI,CAAC;IAClE,qBAAqB,CAAC,GAAG,CAAC,yCAA0B,CAAC,cAAc,EAAE,oBAA+B,CAAC,CAAC;IACtG,qBAAqB,CAAC,GAAG,CAAC,0CAA2B,CAAC,oBAAoB,EAAE,qBAA8B,CAAC,CAAC;IAC5G,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,4BAA4B,mBAAmB,EAAE,CAAC,CAAC,CAAC;AAC7H,CAAC,CAAA,CAAC;AAEF,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC;IACzB,uCAAuC,EAAE,CAAC;AAC9C,CAAC;KAAM,CAAC;IACJ,IAAI,0BAA0B,CAAC,SAAS,EAAE,CAAC;QACvC,MAAM,YAAY,GAAG,qBAAqB,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;QACzD,OAAO,CAAC,IAAI,CAAC,qBAAqB,OAAO,CAAC,GAAG,wBAAwB,YAAY,oBAAoB,CAAC,CAAC;QACvG,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE;YAAE,0BAA0B,CAAC,IAAI,EAAE,CAAC;QAEzE,0BAA0B,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,aAAkB,EAAE,EAAE;YACzD,OAAO,CAAC,IAAI,CAAC,qBAAqB,aAAa,CAAC,OAAO,CAAC,GAAG,qDAAqD,CAAC,CAAC;YAClH,0BAA0B,CAAC,IAAI,EAAE,CAAC;QACtC,CAAC,CAAC,CAAC;IACP,CAAC;SAAM,CAAC;QACJ,uCAAuC,EAAE,CAAC;IAC9C,CAAC;AACL,CAAC","sourcesContent":["require(\"./Common/instrument\");\r\nimport { Request, Response, NextFunction } from 'express';\r\nimport userManagementRoutingController from './Routes/user_routers/userRouter';\r\nimport adminPrivilegesRouteManagement from './Routes/admin_routes/adminRoutes';\r\nimport databaseConnectionEstablishmentProcess from './DB/DB/db_config';\r\nimport absolutePathModuleResolver from 'path';\r\nimport RedisClusterClient from 'ioredis';\r\nimport httpSecurityHeadersManager from 'helmet';\r\nimport requestRateLimitingMiddleware from 'express-rate-limit';\r\nimport structuredLoggingFramework from 'winston';\r\nimport advancedLoggingMiddleware from 'express-winston';\r\nimport sessionManagementController from 'express-session';\r\nimport distributedRedisSessionStore from 'connect-redis';\r\nimport httpCookieProcessingMiddleware from 'cookie-parser';\r\nimport cryptographicRandomBytesGenerator from 'crypto';\r\nimport httpCrossOriginResourceSharingMiddleware from 'cors';\r\nimport { DefaultRequestMethods } from './Common/structure';\r\nimport { ADMIN_SUPPORT_CONFIGURATION, USER_SUPPORT_CONFIGURATION } from './Constants/RoutesDefined/RoutesFormed';\r\nconst operatingSystemModule = require('os');\r\nconst multiProcessClusterManager = require('cluster');\r\nconst applicationPerformanceMonitoring = require(\"@sentry/node\");\r\nconst expressServerFramework = require('express');\r\nconst httpRequestBodyParsingLibrary = require('body-parser');\r\nconst environmentVariableManager = require('dotenv');\r\nconst dataCompressionMiddleware = require('compression');\r\n\r\nconst loadEnvironmentVariablesFromConfigFile = () => {\r\n    try {\r\n        const activeEnvironmentConfigFile = process.env.VERCEL_ENV === 'production' ? './.env.production' : './.env.staging';\r\n        environmentVariableManager.config({ path: absolutePathModuleResolver.resolve(__dirname, activeEnvironmentConfigFile) });\r\n        console.info(`✅ Environment loaded from: ${activeEnvironmentConfigFile}`);\r\n        return activeEnvironmentConfigFile === './.env.staging' \r\n        ? process.env.PRODUCTION_INSTANCE_STAGING\r\n        : process.env.PRODUCTION_INSTANCE_PROD;\r\n    } catch (error : any) {\r\n        console.error(`❌ Error loading environment variables: ${error.message}`);\r\n        return process.env.PRODUCTION_INSTANCE_STAGING\r\n    }\r\n};\r\n\r\nloadEnvironmentVariablesFromConfigFile();\r\ndatabaseConnectionEstablishmentProcess();\r\n\r\nconst redisClusterConnection = new RedisClusterClient(process.env.REDIS_CONNECTION || '');\r\n\r\ninterface CustomRequest extends Request {\r\n    redisClient: RedisClusterClient.Redis;\r\n}\r\nconst generateCryptographicSessionSecret = () => cryptographicRandomBytesGenerator.randomBytes(32).toString('hex');\r\n\r\nconst sessionManagementMiddleware = sessionManagementController({\r\n    store: new distributedRedisSessionStore({ client: redisClusterConnection }),\r\n    secret: generateCryptographicSessionSecret(),\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    cookie: {\r\n        secure: process.env.NODE_ENV === 'production',\r\n        httpOnly: true,\r\n        sameSite: 'strict',\r\n        maxAge: 1000 * 60 * 15,\r\n    }\r\n});\r\n\r\nconst globalRequestRateLimiter = requestRateLimitingMiddleware({\r\n    windowMs: 15 * 60 * 1000,\r\n    max: 100,\r\n    message: { error: \"❌ Too many requests from this IP address. Please try again later.\" }\r\n});\r\n\r\nconst initializeStructuredLoggingSystem = () => {\r\n    const systemLogger = structuredLoggingFramework.createLogger({\r\n        level: 'info',\r\n        format: structuredLoggingFramework.format.combine(\r\n            structuredLoggingFramework.format.timestamp(),\r\n            structuredLoggingFramework.format.json()\r\n        ),\r\n        transports: [\r\n            new structuredLoggingFramework.transports.Console(),\r\n            new structuredLoggingFramework.transports.File({ filename: 'system-logs.log' })\r\n        ],\r\n    });\r\n\r\n    return systemLogger;\r\n};\r\n\r\nconst initializeAndConfigureServerApplication = async () => {\r\n    const httpServerApplication = expressServerFramework();\r\n    const systemLoggerInstance = initializeStructuredLoggingSystem();\r\n    const CORSValidator = loadEnvironmentVariablesFromConfigFile();\r\n\r\n    httpServerApplication.use(advancedLoggingMiddleware.logger({\r\n        winstonInstance: systemLoggerInstance,\r\n        level: 'info',\r\n        msg: 'HTTP {{req.method}} {{req.url}}',\r\n    }));\r\n\r\n    const corsOrigin = CORSValidator?.startsWith('https://') || CORSValidator?.startsWith('http://');\r\n    httpServerApplication.use(httpCrossOriginResourceSharingMiddleware({\r\n        origin: corsOrigin,\r\n        methods: [DefaultRequestMethods.GET , DefaultRequestMethods.POST , DefaultRequestMethods.DELETE , DefaultRequestMethods.OPT , DefaultRequestMethods.PUT],\r\n        credentials: true,\r\n    }));\r\n\r\n    httpServerApplication.use(httpSecurityHeadersManager());\r\n    httpServerApplication.use(dataCompressionMiddleware());\r\n    httpServerApplication.use(httpRequestBodyParsingLibrary.json({ limit: '10kb' }));\r\n    httpServerApplication.use(httpCookieProcessingMiddleware());\r\n    httpServerApplication.use(globalRequestRateLimiter);\r\n    httpServerApplication.use(sessionManagementMiddleware);\r\n    httpServerApplication.use((req: CustomRequest, res: Response, next: NextFunction) => {\r\n        req.redisClient = redisClusterConnection;\r\n        next();\r\n    });\r\n    applicationPerformanceMonitoring.init({ dsn: process.env.SENTRY_DSN });\r\n    const activePortForServer = process.env.PORT_ESTAIBLISHED || 8000;\r\n    httpServerApplication.use(USER_SUPPORT_CONFIGURATION.global_request, userManagementRoutingController);\r\n    httpServerApplication.use(ADMIN_SUPPORT_CONFIGURATION.admin_global_request, adminPrivilegesRouteManagement);\r\n    httpServerApplication.listen(activePortForServer, () => console.info(`✅ Server running on port ${activePortForServer}`));\r\n};\r\n\r\nif (process.env.VERCEL_ENV) {\r\n    initializeAndConfigureServerApplication();\r\n} else {\r\n    if (multiProcessClusterManager.isPrimary) {\r\n        const cpuCoreCount = operatingSystemModule.cpus().length;\r\n        console.info(`✅ Primary process ${process.pid} is running. Forking ${cpuCoreCount} worker processes.`);\r\n        for (let i = 0; i < cpuCoreCount; i++) multiProcessClusterManager.fork();\r\n\r\n        multiProcessClusterManager.on('exit', (workerProcess: any) => {\r\n            console.warn(`👷 Worker process ${workerProcess.process.pid} exited unexpectedly. Forking a new worker process.`);\r\n            multiProcessClusterManager.fork();\r\n        });\r\n    } else {\r\n        initializeAndConfigureServerApplication();\r\n    }\r\n}\r\n"]}